import {
  platformAndArch
} from "./chunk-66NABVCG.js";
import {
  getPackageManager,
  packageManagerFromUserAgent
} from "./chunk-22PYIFA2.js";
import {
  addPublicMetadata,
  addSensitiveMetadata,
  ciPlatform,
  cloudEnvironment,
  currentProcessIsGlobal,
  macAddress
} from "./chunk-WAEWSGBK.js";
import {
  cwd
} from "./chunk-UNPXLODI.js";
import {
  init_cjs_shims
} from "./chunk-ZPL24Y2D.js";

// ../cli-kit/src/private/node/analytics.ts
init_cjs_shims();

// ../cli-kit/src/public/node/crypto.ts
init_cjs_shims();
import crypto from "crypto";
function randomHex(size) {
  return crypto.randomBytes(size).toString("hex");
}
function base64URLEncode(str) {
  return str.toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/[=]/g, "");
}
function sha256(str) {
  return crypto.createHash("sha256").update(str).digest();
}
function hashString(str) {
  return crypto.createHash("sha1").update(str).digest("hex");
}
function fileHash(buff) {
  return crypto.createHash("md5").update(buff).digest("hex");
}
function randomBytes(size) {
  return crypto.randomBytes(size);
}
function randomUUID() {
  return crypto.randomUUID();
}

// ../cli-kit/src/private/node/analytics.ts
async function startAnalytics({
  commandContent,
  args,
  currentTime = (/* @__PURE__ */ new Date()).getTime(),
  commandClass
}) {
  let startCommand = commandContent.command;
  if (commandClass && Object.prototype.hasOwnProperty.call(commandClass, "analyticsNameOverride")) {
    startCommand = commandClass.analyticsNameOverride() ?? commandContent.command;
  }
  await addSensitiveMetadata(() => ({
    commandStartOptions: {
      startTime: currentTime,
      startCommand,
      startArgs: args
    }
  }));
  await addPublicMetadata(() => ({
    cmd_all_launcher: packageManagerFromUserAgent(),
    cmd_all_alias_used: commandContent.alias,
    cmd_all_topic: commandContent.topic,
    cmd_all_plugin: commandClass?.plugin?.name,
    cmd_all_force: flagIncluded("force", commandClass) ? args.includes("--force") : void 0
  }));
}
async function getEnvironmentData(config) {
  const ciplatform = ciPlatform();
  const pluginNames = getPluginNames(config);
  const shopifyPlugins = pluginNames.filter((plugin) => plugin.startsWith("@shopify/"));
  const { platform, arch } = platformAndArch();
  return {
    uname: `${platform} ${arch}`,
    env_ci: ciplatform.isCI,
    env_ci_platform: ciplatform.name,
    env_plugin_installed_any_custom: pluginNames.length !== shopifyPlugins.length,
    env_plugin_installed_shopify: JSON.stringify(shopifyPlugins),
    env_shell: config.shell,
    env_web_ide: cloudEnvironment().editor ? cloudEnvironment().platform : void 0,
    env_device_id: hashString(await macAddress()),
    env_cloud: cloudEnvironment().platform,
    env_package_manager: await getPackageManager(cwd()),
    env_is_global: currentProcessIsGlobal()
  };
}
async function getSensitiveEnvironmentData(config) {
  return {
    env_plugin_installed_all: JSON.stringify(getPluginNames(config))
  };
}
function getPluginNames(config) {
  const pluginNames = [...config.plugins.keys()];
  return pluginNames.sort().filter((plugin) => !plugin.startsWith("@oclif/"));
}
function flagIncluded(flag, commandClass) {
  if (!commandClass)
    return false;
  const commandFlags = commandClass.flags ?? {};
  return Object.keys(commandFlags).includes(flag);
}

export {
  randomHex,
  base64URLEncode,
  sha256,
  hashString,
  fileHash,
  randomBytes,
  randomUUID,
  startAnalytics,
  getEnvironmentData,
  getSensitiveEnvironmentData
};
//# sourceMappingURL=chunk-ADESJ2KG.js.map

import {
  require_zod_to_json_schema
} from "./chunk-DLK3F3DC.js";
import {
  demoStepsSchema
} from "./chunk-BMTG2VHL.js";
import {
  base_command_default
} from "./chunk-5X4QXYEZ.js";
import {
  AbortError,
  fileExists,
  mkdir,
  outputContent,
  outputSuccess,
  outputToken,
  readFile,
  renderAutocompletePrompt,
  writeFile
} from "./chunk-WAEWSGBK.js";
import {
  require_lib
} from "./chunk-GEN4RXTD.js";
import {
  cwd,
  joinPath,
  resolvePath
} from "./chunk-UNPXLODI.js";
import {
  __toESM,
  init_cjs_shims
} from "./chunk-ZPL24Y2D.js";

// src/cli/commands/demo/generate-file.ts
init_cjs_shims();
var import_zod_to_json_schema = __toESM(require_zod_to_json_schema(), 1);
var import_core = __toESM(require_lib(), 1);
import { fileURLToPath } from "url";
var schemaFilename = "demo-schema.json";
var GenerateFile = class _GenerateFile extends base_command_default {
  static {
    this.description = "Create a command design file";
  }
  static {
    this.summary = "Creates a JSON file alongside a JSON schema that will validate it";
  }
  static {
    this.hidden = true;
  }
  static {
    this.flags = {
      path: import_core.Flags.string({
        hidden: false,
        description: "The directory for generating the demo file.",
        env: "SHOPIFY_FLAG_PATH",
        parse: async (input) => resolvePath(input),
        default: async () => cwd()
      }),
      file: import_core.Flags.string({
        hidden: false,
        description: "The name of the demo file.",
        env: "SHOPIFY_FLAG_FILENAME",
        required: true,
        validate: (input) => {
          if (input === schemaFilename) {
            return `The demo file can't be named ${schemaFilename}, as this is used for the schema file.`;
          }
          return true;
        }
      })
    };
  }
  async run() {
    const { flags } = await this.parse(_GenerateFile);
    await mkdir(flags.path);
    const demoFilePath = joinPath(flags.path, flags.file);
    if (await fileExists(demoFilePath)) {
      throw new AbortError(`The file ${demoFilePath} already exists.`);
    }
    const demoSchemaPath = joinPath(flags.path, schemaFilename);
    const jsonSchema = import_zod_to_json_schema.default.default(demoStepsSchema, "demo-steps");
    await Promise.all([
      writeFile(demoSchemaPath, JSON.stringify(jsonSchema, null, 2)),
      writeFile(
        demoFilePath,
        JSON.stringify(
          {
            $schema: `./${schemaFilename}`,
            steps: await selectSteps()
          },
          null,
          2
        )
      )
    ]);
    outputSuccess(outputContent`Created ${outputToken.path(demoFilePath)} and ${outputToken.path(demoSchemaPath)}`);
  }
};
async function selectSteps() {
  const catalogFile = joinPath(fileURLToPath(import.meta.url), "../../../../../assets/demo-catalog.json");
  const { steps } = JSON.parse(await readFile(catalogFile));
  const selectedSteps = [];
  while (true) {
    const stepSelection = await renderAutocompletePrompt({
      message: "Add a step to the demo file",
      choices: [
        {
          label: "I'm done",
          value: "done"
        },
        ...steps.map(({ title, type }) => {
          return {
            label: title,
            value: title,
            group: type
          };
        })
      ]
    });
    if (stepSelection === "done")
      break;
    selectedSteps.push(steps.find(({ title }) => title === stepSelection));
  }
  return selectedSteps;
}

export {
  GenerateFile
};
//# sourceMappingURL=chunk-VS6RWOLM.js.map

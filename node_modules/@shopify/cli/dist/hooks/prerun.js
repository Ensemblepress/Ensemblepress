import {
  startAnalytics
} from "../chunk-ADESJ2KG.js";
import "../chunk-66NABVCG.js";
import "../chunk-22PYIFA2.js";
import "../chunk-RUSG4O2Z.js";
import "../chunk-PRJ3U7MR.js";
import {
  initDemoRecorder,
  outputDebug
} from "../chunk-WAEWSGBK.js";
import "../chunk-JIJ65JT6.js";
import "../chunk-WADS2TV5.js";
import "../chunk-GEN4RXTD.js";
import "../chunk-BYC3NA2Y.js";
import "../chunk-SAR5HGRG.js";
import "../chunk-NABCTJNW.js";
import "../chunk-YC4FLMDD.js";
import "../chunk-UNPXLODI.js";
import "../chunk-LSCXQWNO.js";
import "../chunk-K6257PKA.js";
import "../chunk-XQFDS44U.js";
import "../chunk-AMAYT2P2.js";
import "../chunk-VM4POVNV.js";
import "../chunk-ZPFJOUKZ.js";
import "../chunk-T5LLJYYS.js";
import {
  init_cjs_shims
} from "../chunk-ZPL24Y2D.js";

// src/hooks/prerun.ts
init_cjs_shims();

// ../cli-kit/src/public/node/hooks/prerun.ts
init_cjs_shims();
var hook = async (options) => {
  initDemoRecorder();
  const commandContent = parseCommandContent({
    id: options.Command.id,
    aliases: options.Command.aliases,
    pluginAlias: options.Command.plugin?.alias
  });
  const args = options.argv;
  outputDebug(`Running command ${commandContent.command}`);
  await startAnalytics({ commandContent, args, commandClass: options.Command });
};
function parseCommandContent(cmdInfo) {
  let commandContent = parseCreateCommand(cmdInfo.pluginAlias);
  if (!commandContent) {
    commandContent = parseNormalCommand(cmdInfo.id, cmdInfo.aliases);
  }
  return commandContent;
}
function parseNormalCommand(id, aliases) {
  return {
    command: id.replace(/:/g, " "),
    topic: parseTopic(id),
    alias: findAlias(aliases)
  };
}
function parseCreateCommand(pluginAlias) {
  if (!pluginAlias || !pluginAlias.startsWith("@shopify/create-")) {
    return void 0;
  }
  return { command: pluginAlias.substring(pluginAlias.indexOf("/") + 1) };
}
function parseTopic(cmd) {
  if (cmd.lastIndexOf(":") === -1) {
    return;
  }
  return cmd.slice(0, cmd.lastIndexOf(":")).replace(/:/g, " ");
}
function findAlias(aliases) {
  const existingAlias = aliases.find(
    (alias) => alias.split(":").every((aliasToken) => process.argv.includes(aliasToken))
  );
  if (existingAlias) {
    return existingAlias.replace(/:/g, " ");
  }
}
export {
  hook as default
};
//# sourceMappingURL=prerun.js.map

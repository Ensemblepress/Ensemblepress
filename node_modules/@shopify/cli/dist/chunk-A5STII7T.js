import {
  renderConcurrent,
  renderTasks
} from "./chunk-WAEWSGBK.js";
import {
  init_cjs_shims
} from "./chunk-ZPL24Y2D.js";

// src/cli/services/kitchen-sink/async.ts
init_cjs_shims();
async function asyncTasks() {
  let backendPromiseResolve;
  const backendPromise = new Promise(function(resolve, _reject) {
    backendPromiseResolve = resolve;
  });
  const backendProcess = {
    prefix: "backend",
    action: async (stdout, _stderr, _signal) => {
      stdout.write("first backend message");
      await new Promise((resolve) => setTimeout(resolve, 1e3));
      stdout.write("second backend message");
      await new Promise((resolve) => setTimeout(resolve, 1e3));
      stdout.write("third backend message");
      await new Promise((resolve) => setTimeout(resolve, 1e3));
      backendPromiseResolve();
    }
  };
  const frontendProcess = {
    prefix: "frontend",
    action: async (stdout, _stderr, _signal) => {
      await backendPromise;
      stdout.write("first frontend message");
      await new Promise((resolve) => setTimeout(resolve, 1e3));
      stdout.write("second frontend message");
      await new Promise((resolve) => setTimeout(resolve, 1e3));
      stdout.write("third frontend message");
    }
  };
  await renderConcurrent({
    processes: [backendProcess, frontendProcess]
  });
  const tasks = [
    {
      title: "Installing dependencies",
      task: async () => {
        await new Promise((resolve) => setTimeout(resolve, 2e3));
      }
    },
    {
      title: "Downloading assets",
      task: async () => {
        await new Promise((resolve) => setTimeout(resolve, 2e3));
      }
    }
  ];
  await renderTasks(tasks);
}

export {
  asyncTasks
};
//# sourceMappingURL=chunk-A5STII7T.js.map

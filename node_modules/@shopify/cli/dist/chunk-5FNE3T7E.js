import {
  base_command_default
} from "./chunk-5X4QXYEZ.js";
import {
  renderTable,
  renderText
} from "./chunk-WAEWSGBK.js";
import {
  require_lib
} from "./chunk-GEN4RXTD.js";
import {
  __toESM,
  init_cjs_shims
} from "./chunk-ZPL24Y2D.js";

// src/cli/commands/debug/command-flags.ts
init_cjs_shims();
var import_core = __toESM(require_lib(), 1);
var CommandFlags = class _CommandFlags extends base_command_default {
  static {
    this.description = "View all the available command flags";
  }
  static {
    this.hidden = true;
  }
  static {
    this.flags = {
      // Similar options as the `commands` command from `plugin-commands`
      csv: import_core.Flags.boolean({
        description: "Output as CSV",
        env: "SHOPIFY_FLAG_OUTPUT_CSV",
        default: false
      })
    };
  }
  async run() {
    const { flags } = await this.parse(_CommandFlags);
    const data = [];
    for (const [_, plugin] of this.config.plugins) {
      for (const command of plugin.commands) {
        const loaded = await command.load();
        let pluginName;
        if (plugin.name.startsWith("@shopify")) {
          pluginName = plugin.name.substring("@shopify/".length);
        } else {
          pluginName = plugin.name.startsWith("@oclif") ? plugin.name.substring("@oclif/".length) : plugin.name;
        }
        const flags2 = loaded.flags;
        if (flags2) {
          for (const [flagName, flagConfig] of Object.entries(flags2)) {
            data.push({
              pluginName,
              command: command.id,
              flagName: `--${flagName}`,
              flagChar: flagConfig.char ? `-${flagConfig.char}` : "",
              flagEnv: flagConfig.env
            });
          }
        }
      }
    }
    if (flags.csv) {
      const columns = ["pluginName", "command", "flagName", "flagChar", "flagEnv"];
      const header = `${columns.join(",")}
`;
      const rows = data.map((obj) => columns.map((key) => obj[key]).join(",")).join("\n");
      const csvString = header + rows;
      renderText({ text: csvString });
    } else {
      renderTable({
        rows: data,
        columns: {
          pluginName: {
            header: "plugin",
            color: "red"
          },
          command: {},
          flagName: {
            header: "long flag",
            color: "green"
          },
          flagChar: {
            header: "short flag",
            color: "green"
          },
          flagEnv: {
            header: "env variable",
            color: "blueBright"
          }
        }
      });
    }
  }
};

export {
  CommandFlags
};
//# sourceMappingURL=chunk-5FNE3T7E.js.map

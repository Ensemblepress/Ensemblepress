import {
  require_once
} from "./chunk-FMKVOTQK.js";
import {
  __commonJS,
  __require,
  init_cjs_shims
} from "./chunk-ZPL24Y2D.js";

// ../../node_modules/.pnpm/stackframe@1.3.4/node_modules/stackframe/stackframe.js
var require_stackframe = __commonJS({
  "../../node_modules/.pnpm/stackframe@1.3.4/node_modules/stackframe/stackframe.js"(exports, module) {
    init_cjs_shims();
    (function(root, factory) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define("stackframe", [], factory);
      } else if (typeof exports === "object") {
        module.exports = factory();
      } else {
        root.StackFrame = factory();
      }
    })(exports, function() {
      "use strict";
      function _isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
      }
      function _capitalize(str) {
        return str.charAt(0).toUpperCase() + str.substring(1);
      }
      function _getter(p) {
        return function() {
          return this[p];
        };
      }
      var booleanProps = ["isConstructor", "isEval", "isNative", "isToplevel"];
      var numericProps = ["columnNumber", "lineNumber"];
      var stringProps = ["fileName", "functionName", "source"];
      var arrayProps = ["args"];
      var objectProps = ["evalOrigin"];
      var props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);
      function StackFrame(obj) {
        if (!obj)
          return;
        for (var i2 = 0; i2 < props.length; i2++) {
          if (obj[props[i2]] !== void 0) {
            this["set" + _capitalize(props[i2])](obj[props[i2]]);
          }
        }
      }
      StackFrame.prototype = {
        getArgs: function() {
          return this.args;
        },
        setArgs: function(v) {
          if (Object.prototype.toString.call(v) !== "[object Array]") {
            throw new TypeError("Args must be an Array");
          }
          this.args = v;
        },
        getEvalOrigin: function() {
          return this.evalOrigin;
        },
        setEvalOrigin: function(v) {
          if (v instanceof StackFrame) {
            this.evalOrigin = v;
          } else if (v instanceof Object) {
            this.evalOrigin = new StackFrame(v);
          } else {
            throw new TypeError("Eval Origin must be an Object or StackFrame");
          }
        },
        toString: function() {
          var fileName = this.getFileName() || "";
          var lineNumber = this.getLineNumber() || "";
          var columnNumber = this.getColumnNumber() || "";
          var functionName = this.getFunctionName() || "";
          if (this.getIsEval()) {
            if (fileName) {
              return "[eval] (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
            }
            return "[eval]:" + lineNumber + ":" + columnNumber;
          }
          if (functionName) {
            return functionName + " (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
          }
          return fileName + ":" + lineNumber + ":" + columnNumber;
        }
      };
      StackFrame.fromString = function StackFrame$$fromString(str) {
        var argsStartIndex = str.indexOf("(");
        var argsEndIndex = str.lastIndexOf(")");
        var functionName = str.substring(0, argsStartIndex);
        var args = str.substring(argsStartIndex + 1, argsEndIndex).split(",");
        var locationString = str.substring(argsEndIndex + 1);
        if (locationString.indexOf("@") === 0) {
          var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, "");
          var fileName = parts[1];
          var lineNumber = parts[2];
          var columnNumber = parts[3];
        }
        return new StackFrame({
          functionName,
          args: args || void 0,
          fileName,
          lineNumber: lineNumber || void 0,
          columnNumber: columnNumber || void 0
        });
      };
      for (var i = 0; i < booleanProps.length; i++) {
        StackFrame.prototype["get" + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);
        StackFrame.prototype["set" + _capitalize(booleanProps[i])] = /* @__PURE__ */ function(p) {
          return function(v) {
            this[p] = Boolean(v);
          };
        }(booleanProps[i]);
      }
      for (var j = 0; j < numericProps.length; j++) {
        StackFrame.prototype["get" + _capitalize(numericProps[j])] = _getter(numericProps[j]);
        StackFrame.prototype["set" + _capitalize(numericProps[j])] = /* @__PURE__ */ function(p) {
          return function(v) {
            if (!_isNumber(v)) {
              throw new TypeError(p + " must be a Number");
            }
            this[p] = Number(v);
          };
        }(numericProps[j]);
      }
      for (var k = 0; k < stringProps.length; k++) {
        StackFrame.prototype["get" + _capitalize(stringProps[k])] = _getter(stringProps[k]);
        StackFrame.prototype["set" + _capitalize(stringProps[k])] = /* @__PURE__ */ function(p) {
          return function(v) {
            this[p] = String(v);
          };
        }(stringProps[k]);
      }
      return StackFrame;
    });
  }
});

// ../../node_modules/.pnpm/error-stack-parser@2.1.4/node_modules/error-stack-parser/error-stack-parser.js
var require_error_stack_parser = __commonJS({
  "../../node_modules/.pnpm/error-stack-parser@2.1.4/node_modules/error-stack-parser/error-stack-parser.js"(exports, module) {
    init_cjs_shims();
    (function(root, factory) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define("error-stack-parser", ["stackframe"], factory);
      } else if (typeof exports === "object") {
        module.exports = factory(require_stackframe());
      } else {
        root.ErrorStackParser = factory(root.StackFrame);
      }
    })(exports, function ErrorStackParser(StackFrame) {
      "use strict";
      var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
      var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
      var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
      return {
        /**
         * Given an Error object, extract the most information from it.
         *
         * @param {Error} error object
         * @return {Array} of StackFrames
         */
        parse: function ErrorStackParser$$parse(error) {
          if (typeof error.stacktrace !== "undefined" || typeof error["opera#sourceloc"] !== "undefined") {
            return this.parseOpera(error);
          } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
            return this.parseV8OrIE(error);
          } else if (error.stack) {
            return this.parseFFOrSafari(error);
          } else {
            throw new Error("Cannot parse given Error object");
          }
        },
        // Separate line and column numbers from a string of the form: (URI:Line:Column)
        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
          if (urlLike.indexOf(":") === -1) {
            return [urlLike];
          }
          var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
          var parts = regExp.exec(urlLike.replace(/[()]/g, ""));
          return [parts[1], parts[2] || void 0, parts[3] || void 0];
        },
        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
          var filtered = error.stack.split("\n").filter(function(line) {
            return !!line.match(CHROME_IE_STACK_REGEXP);
          }, this);
          return filtered.map(function(line) {
            if (line.indexOf("(eval ") > -1) {
              line = line.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(,.*$)/g, "");
            }
            var sanitizedLine = line.replace(/^\s+/, "").replace(/\(eval code/g, "(").replace(/^.*?\s+/, "");
            var location = sanitizedLine.match(/ (\(.+\)$)/);
            sanitizedLine = location ? sanitizedLine.replace(location[0], "") : sanitizedLine;
            var locationParts = this.extractLocation(location ? location[1] : sanitizedLine);
            var functionName = location && sanitizedLine || void 0;
            var fileName = ["eval", "<anonymous>"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];
            return new StackFrame({
              functionName,
              fileName,
              lineNumber: locationParts[1],
              columnNumber: locationParts[2],
              source: line
            });
          }, this);
        },
        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
          var filtered = error.stack.split("\n").filter(function(line) {
            return !line.match(SAFARI_NATIVE_CODE_REGEXP);
          }, this);
          return filtered.map(function(line) {
            if (line.indexOf(" > eval") > -1) {
              line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1");
            }
            if (line.indexOf("@") === -1 && line.indexOf(":") === -1) {
              return new StackFrame({
                functionName: line
              });
            } else {
              var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
              var matches = line.match(functionNameRegex);
              var functionName = matches && matches[1] ? matches[1] : void 0;
              var locationParts = this.extractLocation(line.replace(functionNameRegex, ""));
              return new StackFrame({
                functionName,
                fileName: locationParts[0],
                lineNumber: locationParts[1],
                columnNumber: locationParts[2],
                source: line
              });
            }
          }, this);
        },
        parseOpera: function ErrorStackParser$$parseOpera(e) {
          if (!e.stacktrace || e.message.indexOf("\n") > -1 && e.message.split("\n").length > e.stacktrace.split("\n").length) {
            return this.parseOpera9(e);
          } else if (!e.stack) {
            return this.parseOpera10(e);
          } else {
            return this.parseOpera11(e);
          }
        },
        parseOpera9: function ErrorStackParser$$parseOpera9(e) {
          var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
          var lines = e.message.split("\n");
          var result = [];
          for (var i = 2, len = lines.length; i < len; i += 2) {
            var match = lineRE.exec(lines[i]);
            if (match) {
              result.push(new StackFrame({
                fileName: match[2],
                lineNumber: match[1],
                source: lines[i]
              }));
            }
          }
          return result;
        },
        parseOpera10: function ErrorStackParser$$parseOpera10(e) {
          var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
          var lines = e.stacktrace.split("\n");
          var result = [];
          for (var i = 0, len = lines.length; i < len; i += 2) {
            var match = lineRE.exec(lines[i]);
            if (match) {
              result.push(
                new StackFrame({
                  functionName: match[3] || void 0,
                  fileName: match[2],
                  lineNumber: match[1],
                  source: lines[i]
                })
              );
            }
          }
          return result;
        },
        // Opera 10.65+ Error.stack very similar to FF/Safari
        parseOpera11: function ErrorStackParser$$parseOpera11(error) {
          var filtered = error.stack.split("\n").filter(function(line) {
            return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
          }, this);
          return filtered.map(function(line) {
            var tokens = line.split("@");
            var locationParts = this.extractLocation(tokens.pop());
            var functionCall = tokens.shift() || "";
            var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0;
            var argsRaw;
            if (functionCall.match(/\(([^)]*)\)/)) {
              argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, "$1");
            }
            var args = argsRaw === void 0 || argsRaw === "[arguments not available]" ? void 0 : argsRaw.split(",");
            return new StackFrame({
              functionName,
              args,
              fileName: locationParts[0],
              lineNumber: locationParts[1],
              columnNumber: locationParts[2],
              source: line
            });
          }, this);
        }
      };
    });
  }
});

// ../../node_modules/.pnpm/iserror@0.0.2/node_modules/iserror/index.js
var require_iserror = __commonJS({
  "../../node_modules/.pnpm/iserror@0.0.2/node_modules/iserror/index.js"(exports, module) {
    init_cjs_shims();
    module.exports = isError;
    function isError(value) {
      switch (Object.prototype.toString.call(value)) {
        case "[object Error]":
          return true;
        case "[object Exception]":
          return true;
        case "[object DOMException]":
          return true;
        default:
          return value instanceof Error;
      }
    }
  }
});

// ../../node_modules/.pnpm/stack-generator@2.0.10/node_modules/stack-generator/stack-generator.js
var require_stack_generator = __commonJS({
  "../../node_modules/.pnpm/stack-generator@2.0.10/node_modules/stack-generator/stack-generator.js"(exports, module) {
    init_cjs_shims();
    (function(root, factory) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define("stack-generator", ["stackframe"], factory);
      } else if (typeof exports === "object") {
        module.exports = factory(require_stackframe());
      } else {
        root.StackGenerator = factory(root.StackFrame);
      }
    })(exports, function(StackFrame) {
      return {
        backtrace: function StackGenerator$$backtrace(opts) {
          var stack = [];
          var maxStackSize = 10;
          if (typeof opts === "object" && typeof opts.maxStackSize === "number") {
            maxStackSize = opts.maxStackSize;
          }
          var curr = arguments.callee;
          while (curr && stack.length < maxStackSize && curr["arguments"]) {
            var args = new Array(curr["arguments"].length);
            for (var i = 0; i < args.length; ++i) {
              args[i] = curr["arguments"][i];
            }
            if (/function(?:\s+([\w$]+))+\s*\(/.test(curr.toString())) {
              stack.push(new StackFrame({ functionName: RegExp.$1 || void 0, args }));
            } else {
              stack.push(new StackFrame({ args }));
            }
            try {
              curr = curr.caller;
            } catch (e) {
              break;
            }
          }
          return stack;
        }
      };
    });
  }
});

// ../../node_modules/.pnpm/end-of-stream@1.4.4/node_modules/end-of-stream/index.js
var require_end_of_stream = __commonJS({
  "../../node_modules/.pnpm/end-of-stream@1.4.4/node_modules/end-of-stream/index.js"(exports, module) {
    init_cjs_shims();
    var once = require_once();
    var noop = function() {
    };
    var isRequest = function(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    };
    var isChildProcess = function(stream) {
      return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3;
    };
    var eos = function(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var ws = stream._writableState;
      var rs = stream._readableState;
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var cancelled = false;
      var onlegacyfinish = function() {
        if (!stream.writable)
          onfinish();
      };
      var onfinish = function() {
        writable = false;
        if (!readable)
          callback.call(stream);
      };
      var onend = function() {
        readable = false;
        if (!writable)
          callback.call(stream);
      };
      var onexit = function(exitCode) {
        callback.call(stream, exitCode ? new Error("exited with error code: " + exitCode) : null);
      };
      var onerror = function(err) {
        callback.call(stream, err);
      };
      var onclose = function() {
        process.nextTick(onclosenexttick);
      };
      var onclosenexttick = function() {
        if (cancelled)
          return;
        if (readable && !(rs && (rs.ended && !rs.destroyed)))
          return callback.call(stream, new Error("premature close"));
        if (writable && !(ws && (ws.ended && !ws.destroyed)))
          return callback.call(stream, new Error("premature close"));
      };
      var onrequest = function() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !ws) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      if (isChildProcess(stream))
        stream.on("exit", onexit);
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        cancelled = true;
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("exit", onexit);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    };
    module.exports = eos;
  }
});

// ../../node_modules/.pnpm/pump@3.0.0/node_modules/pump/index.js
var require_pump = __commonJS({
  "../../node_modules/.pnpm/pump@3.0.0/node_modules/pump/index.js"(exports, module) {
    init_cjs_shims();
    var once = require_once();
    var eos = require_end_of_stream();
    var fs = __require("fs");
    var noop = function() {
    };
    var ancient = /^v?\.0/.test(process.version);
    var isFn = function(fn) {
      return typeof fn === "function";
    };
    var isFS = function(stream) {
      if (!ancient)
        return false;
      if (!fs)
        return false;
      return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close);
    };
    var isRequest = function(stream) {
      return stream.setHeader && isFn(stream.abort);
    };
    var destroyer = function(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      eos(stream, { readable: reading, writable: writing }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isFS(stream))
          return stream.close(noop);
        if (isRequest(stream))
          return stream.abort();
        if (isFn(stream.destroy))
          return stream.destroy();
        callback(err || new Error("stream was destroyed"));
      };
    };
    var call = function(fn) {
      fn();
    };
    var pipe = function(from, to) {
      return from.pipe(to);
    };
    var pump = function() {
      var streams = Array.prototype.slice.call(arguments);
      var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop;
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2)
        throw new Error("pump requires two streams per minimum");
      var error;
      var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error)
            error = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    };
    module.exports = pump;
  }
});

// ../../node_modules/.pnpm/byline@5.0.0/node_modules/byline/lib/byline.js
var require_byline = __commonJS({
  "../../node_modules/.pnpm/byline@5.0.0/node_modules/byline/lib/byline.js"(exports, module) {
    init_cjs_shims();
    var stream = __require("stream");
    var util = __require("util");
    var timers = __require("timers");
    module.exports = function(readStream, options) {
      return module.exports.createStream(readStream, options);
    };
    module.exports.createStream = function(readStream, options) {
      if (readStream) {
        return createLineStream(readStream, options);
      } else {
        return new LineStream(options);
      }
    };
    module.exports.createLineStream = function(readStream) {
      console.log("WARNING: byline#createLineStream is deprecated and will be removed soon");
      return createLineStream(readStream);
    };
    function createLineStream(readStream, options) {
      if (!readStream) {
        throw new Error("expected readStream");
      }
      if (!readStream.readable) {
        throw new Error("readStream must be readable");
      }
      var ls = new LineStream(options);
      readStream.pipe(ls);
      return ls;
    }
    module.exports.LineStream = LineStream;
    function LineStream(options) {
      stream.Transform.call(this, options);
      options = options || {};
      this._readableState.objectMode = true;
      this._lineBuffer = [];
      this._keepEmptyLines = options.keepEmptyLines || false;
      this._lastChunkEndedWithCR = false;
      var self2 = this;
      this.on("pipe", function(src) {
        if (!self2.encoding) {
          if (src instanceof stream.Readable) {
            self2.encoding = src._readableState.encoding;
          }
        }
      });
    }
    util.inherits(LineStream, stream.Transform);
    LineStream.prototype._transform = function(chunk, encoding, done) {
      encoding = encoding || "utf8";
      if (Buffer.isBuffer(chunk)) {
        if (encoding == "buffer") {
          chunk = chunk.toString();
          encoding = "utf8";
        } else {
          chunk = chunk.toString(encoding);
        }
      }
      this._chunkEncoding = encoding;
      var lines = chunk.split(/\r\n|[\n\v\f\r\x85\u2028\u2029]/g);
      if (this._lastChunkEndedWithCR && chunk[0] == "\n") {
        lines.shift();
      }
      if (this._lineBuffer.length > 0) {
        this._lineBuffer[this._lineBuffer.length - 1] += lines[0];
        lines.shift();
      }
      this._lastChunkEndedWithCR = chunk[chunk.length - 1] == "\r";
      this._lineBuffer = this._lineBuffer.concat(lines);
      this._pushBuffer(encoding, 1, done);
    };
    LineStream.prototype._pushBuffer = function(encoding, keep, done) {
      while (this._lineBuffer.length > keep) {
        var line = this._lineBuffer.shift();
        if (this._keepEmptyLines || line.length > 0) {
          if (!this.push(this._reencode(line, encoding))) {
            var self2 = this;
            timers.setImmediate(function() {
              self2._pushBuffer(encoding, keep, done);
            });
            return;
          }
        }
      }
      done();
    };
    LineStream.prototype._flush = function(done) {
      this._pushBuffer(this._chunkEncoding, 0, done);
    };
    LineStream.prototype._reencode = function(line, chunkEncoding) {
      if (this.encoding && this.encoding != chunkEncoding) {
        return new Buffer(line, chunkEncoding).toString(this.encoding);
      } else if (this.encoding) {
        return line;
      } else {
        return new Buffer(line, chunkEncoding);
      }
    };
  }
});

// ../../node_modules/.pnpm/@bugsnag+node@7.22.7/node_modules/@bugsnag/node/dist/bugsnag.js
var require_bugsnag = __commonJS({
  "../../node_modules/.pnpm/@bugsnag+node@7.22.7/node_modules/@bugsnag/node/dist/bugsnag.js"(exports, module) {
    init_cjs_shims();
    (function(f) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f();
      } else if (typeof define === "function" && define.amd) {
        define([], f);
      } else {
        var g;
        if (typeof window !== "undefined") {
          g = window;
        } else if (typeof global !== "undefined") {
          g = global;
        } else if (typeof self !== "undefined") {
          g = self;
        } else {
          g = this;
        }
        g.bugsnag = f();
      }
    })(function() {
      var define2, module2, exports2;
      var Breadcrumb = /* @__PURE__ */ function() {
        function Breadcrumb2(message, metadata, type, timestamp) {
          if (timestamp === void 0) {
            timestamp = /* @__PURE__ */ new Date();
          }
          this.type = type;
          this.message = message;
          this.metadata = metadata;
          this.timestamp = timestamp;
        }
        var _proto = Breadcrumb2.prototype;
        _proto.toJSON = function toJSON() {
          return {
            type: this.type,
            name: this.message,
            timestamp: this.timestamp,
            metaData: this.metadata
          };
        };
        return Breadcrumb2;
      }();
      var _$Breadcrumb_1 = Breadcrumb;
      var _$breadcrumbTypes_6 = ["navigation", "request", "process", "log", "user", "state", "error", "manual"];
      var _$reduce_16 = function(arr, fn, accum) {
        var val = accum;
        for (var i = 0, len = arr.length; i < len; i++)
          val = fn(val, arr[i], i, arr);
        return val;
      };
      ;
      var _$filter_11 = function(arr, fn) {
        return _$reduce_16(arr, function(accum, item, i, arr2) {
          return !fn(item, i, arr2) ? accum : accum.concat(item);
        }, []);
      };
      ;
      var _$includes_12 = function(arr, x) {
        return _$reduce_16(arr, function(accum, item, i, arr2) {
          return accum === true || item === x;
        }, false);
      };
      var _$isArray_13 = function(obj) {
        return Object.prototype.toString.call(obj) === "[object Array]";
      };
      var _hasDontEnumBug = !{
        toString: null
      }.propertyIsEnumerable("toString");
      var _dontEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"];
      var _$keys_14 = function(obj) {
        var result = [];
        var prop;
        for (prop in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, prop))
            result.push(prop);
        }
        if (!_hasDontEnumBug)
          return result;
        for (var i = 0, len = _dontEnums.length; i < len; i++) {
          if (Object.prototype.hasOwnProperty.call(obj, _dontEnums[i]))
            result.push(_dontEnums[i]);
        }
        return result;
      };
      var _$intRange_25 = function(min, max) {
        if (min === void 0) {
          min = 1;
        }
        if (max === void 0) {
          max = Infinity;
        }
        return function(value) {
          return typeof value === "number" && parseInt("" + value, 10) === value && value >= min && value <= max;
        };
      };
      ;
      ;
      var _$listOfFunctions_26 = function(value) {
        return typeof value === "function" || _$isArray_13(value) && _$filter_11(value, function(f) {
          return typeof f === "function";
        }).length === value.length;
      };
      var _$stringWithLength_27 = function(value) {
        return typeof value === "string" && !!value.length;
      };
      var _$config_3 = {};
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      var defaultErrorTypes = function() {
        return {
          unhandledExceptions: true,
          unhandledRejections: true
        };
      };
      _$config_3.schema = {
        apiKey: {
          defaultValue: function() {
            return null;
          },
          message: "is required",
          validate: _$stringWithLength_27
        },
        appVersion: {
          defaultValue: function() {
            return void 0;
          },
          message: "should be a string",
          validate: function(value) {
            return value === void 0 || _$stringWithLength_27(value);
          }
        },
        appType: {
          defaultValue: function() {
            return void 0;
          },
          message: "should be a string",
          validate: function(value) {
            return value === void 0 || _$stringWithLength_27(value);
          }
        },
        autoDetectErrors: {
          defaultValue: function() {
            return true;
          },
          message: "should be true|false",
          validate: function(value) {
            return value === true || value === false;
          }
        },
        enabledErrorTypes: {
          defaultValue: function() {
            return defaultErrorTypes();
          },
          message: "should be an object containing the flags { unhandledExceptions:true|false, unhandledRejections:true|false }",
          allowPartialObject: true,
          validate: function(value) {
            if (typeof value !== "object" || !value)
              return false;
            var providedKeys = _$keys_14(value);
            var defaultKeys = _$keys_14(defaultErrorTypes());
            if (_$filter_11(providedKeys, function(k) {
              return _$includes_12(defaultKeys, k);
            }).length < providedKeys.length)
              return false;
            if (_$filter_11(_$keys_14(value), function(k) {
              return typeof value[k] !== "boolean";
            }).length > 0)
              return false;
            return true;
          }
        },
        onError: {
          defaultValue: function() {
            return [];
          },
          message: "should be a function or array of functions",
          validate: _$listOfFunctions_26
        },
        onSession: {
          defaultValue: function() {
            return [];
          },
          message: "should be a function or array of functions",
          validate: _$listOfFunctions_26
        },
        onBreadcrumb: {
          defaultValue: function() {
            return [];
          },
          message: "should be a function or array of functions",
          validate: _$listOfFunctions_26
        },
        endpoints: {
          defaultValue: function() {
            return {
              notify: "https://notify.bugsnag.com",
              sessions: "https://sessions.bugsnag.com"
            };
          },
          message: "should be an object containing endpoint URLs { notify, sessions }",
          validate: function(val) {
            return (
              // first, ensure it's an object
              val && typeof val === "object" && // notify and sessions must always be set
              _$stringWithLength_27(val.notify) && _$stringWithLength_27(val.sessions) && // ensure no keys other than notify/session are set on endpoints object
              _$filter_11(_$keys_14(val), function(k) {
                return !_$includes_12(["notify", "sessions"], k);
              }).length === 0
            );
          }
        },
        autoTrackSessions: {
          defaultValue: function(val) {
            return true;
          },
          message: "should be true|false",
          validate: function(val) {
            return val === true || val === false;
          }
        },
        enabledReleaseStages: {
          defaultValue: function() {
            return null;
          },
          message: "should be an array of strings",
          validate: function(value) {
            return value === null || _$isArray_13(value) && _$filter_11(value, function(f) {
              return typeof f === "string";
            }).length === value.length;
          }
        },
        releaseStage: {
          defaultValue: function() {
            return "production";
          },
          message: "should be a string",
          validate: function(value) {
            return typeof value === "string" && value.length;
          }
        },
        maxBreadcrumbs: {
          defaultValue: function() {
            return 25;
          },
          message: "should be a number \u2264100",
          validate: function(value) {
            return _$intRange_25(0, 100)(value);
          }
        },
        enabledBreadcrumbTypes: {
          defaultValue: function() {
            return _$breadcrumbTypes_6;
          },
          message: "should be null or a list of available breadcrumb types (" + _$breadcrumbTypes_6.join(",") + ")",
          validate: function(value) {
            return value === null || _$isArray_13(value) && _$reduce_16(value, function(accum, maybeType) {
              if (accum === false)
                return accum;
              return _$includes_12(_$breadcrumbTypes_6, maybeType);
            }, true);
          }
        },
        context: {
          defaultValue: function() {
            return void 0;
          },
          message: "should be a string",
          validate: function(value) {
            return value === void 0 || typeof value === "string";
          }
        },
        user: {
          defaultValue: function() {
            return {};
          },
          message: "should be an object with { id, email, name } properties",
          validate: function(value) {
            return value === null || value && _$reduce_16(_$keys_14(value), function(accum, key) {
              return accum && _$includes_12(["id", "email", "name"], key);
            }, true);
          }
        },
        metadata: {
          defaultValue: function() {
            return {};
          },
          message: "should be an object",
          validate: function(value) {
            return typeof value === "object" && value !== null;
          }
        },
        logger: {
          defaultValue: function() {
            return void 0;
          },
          message: "should be null or an object with methods { debug, info, warn, error }",
          validate: function(value) {
            return !value || value && _$reduce_16(["debug", "info", "warn", "error"], function(accum, method) {
              return accum && typeof value[method] === "function";
            }, true);
          }
        },
        redactedKeys: {
          defaultValue: function() {
            return ["password"];
          },
          message: "should be an array of strings|regexes",
          validate: function(value) {
            return _$isArray_13(value) && value.length === _$filter_11(value, function(s) {
              return typeof s === "string" || s && typeof s.test === "function";
            }).length;
          }
        },
        plugins: {
          defaultValue: function() {
            return [];
          },
          message: "should be an array of plugin objects",
          validate: function(value) {
            return _$isArray_13(value) && value.length === _$filter_11(value, function(p) {
              return p && typeof p === "object" && typeof p.load === "function";
            }).length;
          }
        },
        featureFlags: {
          defaultValue: function() {
            return [];
          },
          message: 'should be an array of objects that have a "name" property',
          validate: function(value) {
            return _$isArray_13(value) && value.length === _$filter_11(value, function(feature) {
              return feature && typeof feature === "object" && typeof feature.name === "string";
            }).length;
          }
        }
      };
      var _$errorStackParser_9 = require_error_stack_parser();
      var _$assign_10 = function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      ;
      var _$map_15 = function(arr, fn) {
        return _$reduce_16(arr, function(accum, item, i, arr2) {
          return accum.concat(fn(item, i, arr2));
        }, []);
      };
      var _$safeJsonStringify_31 = function(data, replacer, space, opts) {
        var redactedKeys = opts && opts.redactedKeys ? opts.redactedKeys : [];
        var redactedPaths = opts && opts.redactedPaths ? opts.redactedPaths : [];
        return JSON.stringify(prepareObjForSerialization(data, redactedKeys, redactedPaths), replacer, space);
      };
      var MAX_DEPTH = 20;
      var MAX_EDGES = 25e3;
      var MIN_PRESERVED_DEPTH = 8;
      var REPLACEMENT_NODE = "...";
      function isError(o) {
        return o instanceof Error || /^\[object (Error|(Dom)?Exception)\]$/.test(Object.prototype.toString.call(o));
      }
      function throwsMessage(err) {
        return "[Throws: " + (err ? err.message : "?") + "]";
      }
      function find(haystack, needle) {
        for (var i = 0, len = haystack.length; i < len; i++) {
          if (haystack[i] === needle)
            return true;
        }
        return false;
      }
      function isDescendent(paths, path2) {
        for (var i = 0, len = paths.length; i < len; i++) {
          if (path2.indexOf(paths[i]) === 0)
            return true;
        }
        return false;
      }
      function shouldRedact(patterns, key) {
        for (var i = 0, len = patterns.length; i < len; i++) {
          if (typeof patterns[i] === "string" && patterns[i].toLowerCase() === key.toLowerCase())
            return true;
          if (patterns[i] && typeof patterns[i].test === "function" && patterns[i].test(key))
            return true;
        }
        return false;
      }
      function __isArray_31(obj) {
        return Object.prototype.toString.call(obj) === "[object Array]";
      }
      function safelyGetProp(obj, prop) {
        try {
          return obj[prop];
        } catch (err) {
          return throwsMessage(err);
        }
      }
      function prepareObjForSerialization(obj, redactedKeys, redactedPaths) {
        var seen = [];
        var edges = 0;
        function visit(obj2, path2) {
          function edgesExceeded() {
            return path2.length > MIN_PRESERVED_DEPTH && edges > MAX_EDGES;
          }
          edges++;
          if (path2.length > MAX_DEPTH)
            return REPLACEMENT_NODE;
          if (edgesExceeded())
            return REPLACEMENT_NODE;
          if (obj2 === null || typeof obj2 !== "object")
            return obj2;
          if (find(seen, obj2))
            return "[Circular]";
          seen.push(obj2);
          if (typeof obj2.toJSON === "function") {
            try {
              edges--;
              var fResult = visit(obj2.toJSON(), path2);
              seen.pop();
              return fResult;
            } catch (err) {
              return throwsMessage(err);
            }
          }
          var er = isError(obj2);
          if (er) {
            edges--;
            var eResult = visit({
              name: obj2.name,
              message: obj2.message
            }, path2);
            seen.pop();
            return eResult;
          }
          if (__isArray_31(obj2)) {
            var aResult = [];
            for (var i = 0, len = obj2.length; i < len; i++) {
              if (edgesExceeded()) {
                aResult.push(REPLACEMENT_NODE);
                break;
              }
              aResult.push(visit(obj2[i], path2.concat("[]")));
            }
            seen.pop();
            return aResult;
          }
          var result = {};
          try {
            for (var prop in obj2) {
              if (!Object.prototype.hasOwnProperty.call(obj2, prop))
                continue;
              if (isDescendent(redactedPaths, path2.join(".")) && shouldRedact(redactedKeys, prop)) {
                result[prop] = "[REDACTED]";
                continue;
              }
              if (edgesExceeded()) {
                result[prop] = REPLACEMENT_NODE;
                break;
              }
              result[prop] = visit(safelyGetProp(obj2, prop), path2.concat(prop));
            }
          } catch (e) {
          }
          seen.pop();
          return result;
        }
        return visit(obj, []);
      }
      ;
      ;
      ;
      ;
      function add(existingFeatures, existingFeatureKeys, name2, variant) {
        if (typeof name2 !== "string") {
          return;
        }
        if (variant === void 0) {
          variant = null;
        } else if (variant !== null && typeof variant !== "string") {
          variant = _$safeJsonStringify_31(variant);
        }
        var existingIndex = existingFeatureKeys[name2];
        if (typeof existingIndex === "number") {
          existingFeatures[existingIndex] = {
            name: name2,
            variant
          };
          return;
        }
        existingFeatures.push({
          name: name2,
          variant
        });
        existingFeatureKeys[name2] = existingFeatures.length - 1;
      }
      function merge(existingFeatures, newFeatures, existingFeatureKeys) {
        if (!_$isArray_13(newFeatures)) {
          return;
        }
        for (var i = 0; i < newFeatures.length; ++i) {
          var feature = newFeatures[i];
          if (feature === null || typeof feature !== "object") {
            continue;
          }
          add(existingFeatures, existingFeatureKeys, feature.name, feature.variant);
        }
        return existingFeatures;
      }
      function toEventApi(featureFlags) {
        return _$map_15(_$filter_11(featureFlags, Boolean), function(_ref) {
          var name2 = _ref.name, variant = _ref.variant;
          var flag = {
            featureFlag: name2
          };
          if (typeof variant === "string") {
            flag.variant = variant;
          }
          return flag;
        });
      }
      function clear(features, featuresIndex, name2) {
        var existingIndex = featuresIndex[name2];
        if (typeof existingIndex === "number") {
          features[existingIndex] = null;
          delete featuresIndex[name2];
        }
      }
      var _$featureFlagDelegate_17 = {
        add,
        clear,
        merge,
        toEventApi
      };
      var _$hasStack_18 = function(err) {
        return !!err && (!!err.stack || !!err.stacktrace || !!err["opera#sourceloc"]) && typeof (err.stack || err.stacktrace || err["opera#sourceloc"]) === "string" && err.stack !== err.name + ": " + err.message;
      };
      var _$iserror_19 = require_iserror();
      ;
      var __add_21 = function(state, section, keyOrObj, maybeVal) {
        var _updates;
        if (!section)
          return;
        var updates;
        if (keyOrObj === null)
          return __clear_21(state, section);
        if (typeof keyOrObj === "object")
          updates = keyOrObj;
        if (typeof keyOrObj === "string")
          updates = (_updates = {}, _updates[keyOrObj] = maybeVal, _updates);
        if (!updates)
          return;
        if (section === "__proto__" || section === "constructor" || section === "prototype") {
          return;
        }
        if (!state[section])
          state[section] = {};
        state[section] = _$assign_10({}, state[section], updates);
      };
      var get = function(state, section, key) {
        if (typeof section !== "string")
          return void 0;
        if (!key) {
          return state[section];
        }
        if (state[section]) {
          return state[section][key];
        }
        return void 0;
      };
      var __clear_21 = function(state, section, key) {
        if (typeof section !== "string")
          return;
        if (!key) {
          delete state[section];
          return;
        }
        if (section === "__proto__" || section === "constructor" || section === "prototype") {
          return;
        }
        if (state[section]) {
          delete state[section][key];
        }
      };
      var _$metadataDelegate_21 = {
        add: __add_21,
        get,
        clear: __clear_21
      };
      ;
      var StackGenerator = require_stack_generator();
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      var Event = /* @__PURE__ */ function() {
        function Event2(errorClass, errorMessage, stacktrace, handledState, originalError) {
          if (stacktrace === void 0) {
            stacktrace = [];
          }
          if (handledState === void 0) {
            handledState = defaultHandledState();
          }
          this.apiKey = void 0;
          this.context = void 0;
          this.groupingHash = void 0;
          this.originalError = originalError;
          this._handledState = handledState;
          this.severity = this._handledState.severity;
          this.unhandled = this._handledState.unhandled;
          this.app = {};
          this.device = {};
          this.request = {};
          this.breadcrumbs = [];
          this.threads = [];
          this._metadata = {};
          this._features = [];
          this._featuresIndex = {};
          this._user = {};
          this._session = void 0;
          this.errors = [createBugsnagError(errorClass, errorMessage, Event2.__type, stacktrace)];
        }
        var _proto = Event2.prototype;
        _proto.addMetadata = function addMetadata(section, keyOrObj, maybeVal) {
          return _$metadataDelegate_21.add(this._metadata, section, keyOrObj, maybeVal);
        };
        _proto.getMetadata = function getMetadata(section, key) {
          return _$metadataDelegate_21.get(this._metadata, section, key);
        };
        _proto.clearMetadata = function clearMetadata(section, key) {
          return _$metadataDelegate_21.clear(this._metadata, section, key);
        };
        _proto.addFeatureFlag = function addFeatureFlag(name2, variant) {
          if (variant === void 0) {
            variant = null;
          }
          _$featureFlagDelegate_17.add(this._features, this._featuresIndex, name2, variant);
        };
        _proto.addFeatureFlags = function addFeatureFlags(featureFlags) {
          _$featureFlagDelegate_17.merge(this._features, featureFlags, this._featuresIndex);
        };
        _proto.getFeatureFlags = function getFeatureFlags() {
          return _$featureFlagDelegate_17.toEventApi(this._features);
        };
        _proto.clearFeatureFlag = function clearFeatureFlag(name2) {
          _$featureFlagDelegate_17.clear(this._features, this._featuresIndex, name2);
        };
        _proto.clearFeatureFlags = function clearFeatureFlags() {
          this._features = [];
          this._featuresIndex = {};
        };
        _proto.getUser = function getUser() {
          return this._user;
        };
        _proto.setUser = function setUser(id, email, name2) {
          this._user = {
            id,
            email,
            name: name2
          };
        };
        _proto.toJSON = function toJSON() {
          return {
            payloadVersion: "4",
            exceptions: _$map_15(this.errors, function(er) {
              return _$assign_10({}, er, {
                message: er.errorMessage
              });
            }),
            severity: this.severity,
            unhandled: this._handledState.unhandled,
            severityReason: this._handledState.severityReason,
            app: this.app,
            device: this.device,
            request: this.request,
            breadcrumbs: this.breadcrumbs,
            context: this.context,
            groupingHash: this.groupingHash,
            metaData: this._metadata,
            user: this._user,
            session: this._session,
            featureFlags: this.getFeatureFlags()
          };
        };
        return Event2;
      }();
      var formatStackframe = function(frame) {
        var f = {
          file: frame.fileName,
          method: normaliseFunctionName(frame.functionName),
          lineNumber: frame.lineNumber,
          columnNumber: frame.columnNumber,
          code: void 0,
          inProject: void 0
        };
        if (f.lineNumber > -1 && !f.file && !f.method) {
          f.file = "global code";
        }
        return f;
      };
      var normaliseFunctionName = function(name2) {
        return /^global code$/i.test(name2) ? "global code" : name2;
      };
      var defaultHandledState = function() {
        return {
          unhandled: false,
          severity: "warning",
          severityReason: {
            type: "handledException"
          }
        };
      };
      var ensureString = function(str) {
        return typeof str === "string" ? str : "";
      };
      function createBugsnagError(errorClass, errorMessage, type, stacktrace) {
        return {
          errorClass: ensureString(errorClass),
          errorMessage: ensureString(errorMessage),
          type,
          stacktrace: _$reduce_16(stacktrace, function(accum, frame) {
            var f = formatStackframe(frame);
            try {
              if (JSON.stringify(f) === "{}")
                return accum;
              return accum.concat(f);
            } catch (e) {
              return accum;
            }
          }, [])
        };
      }
      function getCauseStack(error) {
        if (error.cause) {
          return [error].concat(getCauseStack(error.cause));
        } else {
          return [error];
        }
      }
      Event.getStacktrace = function(error, errorFramesToSkip, backtraceFramesToSkip) {
        if (_$hasStack_18(error))
          return _$errorStackParser_9.parse(error).slice(errorFramesToSkip);
        try {
          return _$filter_11(StackGenerator.backtrace(), function(frame) {
            return (frame.functionName || "").indexOf("StackGenerator$$") === -1;
          }).slice(1 + backtraceFramesToSkip);
        } catch (e) {
          return [];
        }
      };
      Event.create = function(maybeError, tolerateNonErrors, handledState, component, errorFramesToSkip, logger) {
        if (errorFramesToSkip === void 0) {
          errorFramesToSkip = 0;
        }
        var _normaliseError = normaliseError(maybeError, tolerateNonErrors, component, logger), error = _normaliseError[0], internalFrames = _normaliseError[1];
        var event;
        try {
          var stacktrace = Event.getStacktrace(
            error,
            // if an error was created/throw in the normaliseError() function, we need to
            // tell the getStacktrace() function to skip the number of frames we know will
            // be from our own functions. This is added to the number of frames deep we
            // were told about
            internalFrames > 0 ? 1 + internalFrames + errorFramesToSkip : 0,
            // if there's no stacktrace, the callstack may be walked to generated one.
            // this is how many frames should be removed because they come from our library
            1 + errorFramesToSkip
          );
          event = new Event(error.name, error.message, stacktrace, handledState, maybeError);
        } catch (e) {
          event = new Event(error.name, error.message, [], handledState, maybeError);
        }
        if (error.name === "InvalidError") {
          event.addMetadata("" + component, "non-error parameter", makeSerialisable(maybeError));
        }
        if (error.cause) {
          var _event$errors;
          var causes = getCauseStack(error).slice(1);
          var normalisedCauses = _$map_15(causes, function(cause) {
            var stacktrace2 = _$iserror_19(cause) && _$hasStack_18(cause) ? _$errorStackParser_9.parse(cause) : [];
            var _normaliseError2 = normaliseError(cause, true, "error cause"), error2 = _normaliseError2[0];
            if (error2.name === "InvalidError")
              event.addMetadata("error cause", makeSerialisable(cause));
            return createBugsnagError(error2.name, error2.message, Event.__type, stacktrace2);
          });
          (_event$errors = event.errors).push.apply(_event$errors, normalisedCauses);
        }
        return event;
      };
      var makeSerialisable = function(err) {
        if (err === null)
          return "null";
        if (err === void 0)
          return "undefined";
        return err;
      };
      var normaliseError = function(maybeError, tolerateNonErrors, component, logger) {
        var error;
        var internalFrames = 0;
        var createAndLogInputError = function(reason) {
          var verb = component === "error cause" ? "was" : "received";
          if (logger)
            logger.warn(component + " " + verb + ' a non-error: "' + reason + '"');
          var err = new Error(component + " " + verb + ' a non-error. See "' + component + '" tab for more detail.');
          err.name = "InvalidError";
          return err;
        };
        if (!tolerateNonErrors) {
          if (_$iserror_19(maybeError)) {
            error = maybeError;
          } else {
            error = createAndLogInputError(typeof maybeError);
            internalFrames += 2;
          }
        } else {
          switch (typeof maybeError) {
            case "string":
            case "number":
            case "boolean":
              error = new Error(String(maybeError));
              internalFrames += 1;
              break;
            case "function":
              error = createAndLogInputError("function");
              internalFrames += 2;
              break;
            case "object":
              if (maybeError !== null && _$iserror_19(maybeError)) {
                error = maybeError;
              } else if (maybeError !== null && hasNecessaryFields(maybeError)) {
                error = new Error(maybeError.message || maybeError.errorMessage);
                error.name = maybeError.name || maybeError.errorClass;
                internalFrames += 1;
              } else {
                error = createAndLogInputError(maybeError === null ? "null" : "unsupported object");
                internalFrames += 2;
              }
              break;
            default:
              error = createAndLogInputError("nothing");
              internalFrames += 2;
          }
        }
        if (!_$hasStack_18(error)) {
          try {
            throw error;
          } catch (e) {
            if (_$hasStack_18(e)) {
              error = e;
              internalFrames = 1;
            }
          }
        }
        return [error, internalFrames];
      };
      Event.__type = "browserjs";
      var hasNecessaryFields = function(error) {
        return (typeof error.name === "string" || typeof error.errorClass === "string") && (typeof error.message === "string" || typeof error.errorMessage === "string");
      };
      var _$Event_4 = Event;
      var _$asyncEvery_5 = function(arr, fn, cb) {
        var index = 0;
        var next = function() {
          if (index >= arr.length)
            return cb(null, true);
          fn(arr[index], function(err, result) {
            if (err)
              return cb(err);
            if (result === false)
              return cb(null, false);
            index++;
            next();
          });
        };
        next();
      };
      ;
      var _$callbackRunner_7 = function(callbacks, event, onCallbackError, cb) {
        var runMaybeAsyncCallback = function(fn, cb2) {
          if (typeof fn !== "function")
            return cb2(null);
          try {
            if (fn.length !== 2) {
              var ret = fn(event);
              if (ret && typeof ret.then === "function") {
                return ret.then(
                  // resolve
                  function(val) {
                    return setTimeout(function() {
                      return cb2(null, val);
                    });
                  },
                  // reject
                  function(err) {
                    setTimeout(function() {
                      onCallbackError(err);
                      return cb2(null, true);
                    });
                  }
                );
              }
              return cb2(null, ret);
            }
            fn(event, function(err, result) {
              if (err) {
                onCallbackError(err);
                return cb2(null);
              }
              cb2(null, result);
            });
          } catch (e) {
            onCallbackError(e);
            cb2(null);
          }
        };
        _$asyncEvery_5(callbacks, runMaybeAsyncCallback, cb);
      };
      var _$syncCallbackRunner_24 = function(callbacks, callbackArg, callbackType, logger) {
        var ignore = false;
        var cbs = callbacks.slice();
        while (!ignore) {
          if (!cbs.length)
            break;
          try {
            ignore = cbs.pop()(callbackArg) === false;
          } catch (e) {
            logger.error("Error occurred in " + callbackType + " callback, continuing anyway\u2026");
            logger.error(e);
          }
        }
        return ignore;
      };
      var _$pad_30 = function pad(num, size) {
        var s = "000000000" + num;
        return s.substr(s.length - size);
      };
      ;
      var os = __require("os"), padding = 2, pid = _$pad_30(process.pid.toString(36), padding), hostname = os.hostname(), length = hostname.length, hostId = _$pad_30(hostname.split("").reduce(function(prev, char) {
        return +prev + char.charCodeAt(0);
      }, +length + 36).toString(36), padding);
      var _$fingerprint_29 = function fingerprint() {
        return pid + hostId;
      };
      ;
      ;
      var c = 0, blockSize = 4, base = 36, discreteValues = Math.pow(base, blockSize);
      function randomBlock() {
        return _$pad_30((Math.random() * discreteValues << 0).toString(base), blockSize);
      }
      function safeCounter() {
        c = c < discreteValues ? c : 0;
        c++;
        return c - 1;
      }
      function cuid() {
        var letter = "c", timestamp = (/* @__PURE__ */ new Date()).getTime().toString(base), counter = _$pad_30(safeCounter().toString(base), blockSize), print = _$fingerprint_29(), random = randomBlock() + randomBlock();
        return letter + timestamp + counter + print + random;
      }
      cuid.fingerprint = _$fingerprint_29;
      var _$cuid_28 = cuid;
      ;
      var Session = /* @__PURE__ */ function() {
        function Session2() {
          this.id = _$cuid_28();
          this.startedAt = /* @__PURE__ */ new Date();
          this._handled = 0;
          this._unhandled = 0;
          this._user = {};
          this.app = {};
          this.device = {};
        }
        var _proto = Session2.prototype;
        _proto.getUser = function getUser() {
          return this._user;
        };
        _proto.setUser = function setUser(id, email, name2) {
          this._user = {
            id,
            email,
            name: name2
          };
        };
        _proto.toJSON = function toJSON() {
          return {
            id: this.id,
            startedAt: this.startedAt,
            events: {
              handled: this._handled,
              unhandled: this._unhandled
            }
          };
        };
        _proto._track = function _track(event) {
          this[event._handledState.unhandled ? "_unhandled" : "_handled"] += 1;
        };
        return Session2;
      }();
      var _$Session_32 = Session;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      var __add_2 = _$featureFlagDelegate_17.add, __clear_2 = _$featureFlagDelegate_17.clear, __merge_2 = _$featureFlagDelegate_17.merge;
      var noop = function() {
      };
      var Client = /* @__PURE__ */ function() {
        function Client2(configuration, schema2, internalPlugins2, notifier) {
          var _this = this;
          if (schema2 === void 0) {
            schema2 = _$config_3.schema;
          }
          if (internalPlugins2 === void 0) {
            internalPlugins2 = [];
          }
          this._notifier = notifier;
          this._config = {};
          this._schema = schema2;
          this._delivery = {
            sendSession: noop,
            sendEvent: noop
          };
          this._logger = {
            debug: noop,
            info: noop,
            warn: noop,
            error: noop
          };
          this._plugins = {};
          this._breadcrumbs = [];
          this._session = null;
          this._metadata = {};
          this._featuresIndex = {};
          this._features = [];
          this._context = void 0;
          this._user = {};
          this._cbs = {
            e: [],
            s: [],
            sp: [],
            b: []
          };
          this.Client = Client2;
          this.Event = _$Event_4;
          this.Breadcrumb = _$Breadcrumb_1;
          this.Session = _$Session_32;
          this._config = this._configure(configuration, internalPlugins2);
          _$map_15(internalPlugins2.concat(this._config.plugins), function(pl) {
            if (pl)
              _this._loadPlugin(pl);
          });
          this._depth = 1;
          var self2 = this;
          var notify = this.notify;
          this.notify = function() {
            return notify.apply(self2, arguments);
          };
        }
        var _proto = Client2.prototype;
        _proto.addMetadata = function addMetadata(section, keyOrObj, maybeVal) {
          return _$metadataDelegate_21.add(this._metadata, section, keyOrObj, maybeVal);
        };
        _proto.getMetadata = function getMetadata(section, key) {
          return _$metadataDelegate_21.get(this._metadata, section, key);
        };
        _proto.clearMetadata = function clearMetadata(section, key) {
          return _$metadataDelegate_21.clear(this._metadata, section, key);
        };
        _proto.addFeatureFlag = function addFeatureFlag(name2, variant) {
          if (variant === void 0) {
            variant = null;
          }
          __add_2(this._features, this._featuresIndex, name2, variant);
        };
        _proto.addFeatureFlags = function addFeatureFlags(featureFlags) {
          __merge_2(this._features, featureFlags, this._featuresIndex);
        };
        _proto.clearFeatureFlag = function clearFeatureFlag(name2) {
          __clear_2(this._features, this._featuresIndex, name2);
        };
        _proto.clearFeatureFlags = function clearFeatureFlags() {
          this._features = [];
          this._featuresIndex = {};
        };
        _proto.getContext = function getContext2() {
          return this._context;
        };
        _proto.setContext = function setContext(c2) {
          this._context = c2;
        };
        _proto._configure = function _configure(opts, internalPlugins2) {
          var schema2 = _$reduce_16(internalPlugins2, function(schema3, plugin) {
            if (plugin && plugin.configSchema)
              return _$assign_10({}, schema3, plugin.configSchema);
            return schema3;
          }, this._schema);
          var _reduce = _$reduce_16(_$keys_14(schema2), function(accum, key) {
            var defaultValue = schema2[key].defaultValue(opts[key]);
            if (opts[key] !== void 0) {
              var valid = schema2[key].validate(opts[key]);
              if (!valid) {
                accum.errors[key] = schema2[key].message;
                accum.config[key] = defaultValue;
              } else {
                if (schema2[key].allowPartialObject) {
                  accum.config[key] = _$assign_10(defaultValue, opts[key]);
                } else {
                  accum.config[key] = opts[key];
                }
              }
            } else {
              accum.config[key] = defaultValue;
            }
            return accum;
          }, {
            errors: {},
            config: {}
          }), errors = _reduce.errors, config = _reduce.config;
          if (schema2.apiKey) {
            if (!config.apiKey)
              throw new Error("No Bugsnag API Key set");
            if (!/^[0-9a-f]{32}$/i.test(config.apiKey))
              errors.apiKey = "should be a string of 32 hexadecimal characters";
          }
          this._metadata = _$assign_10({}, config.metadata);
          __merge_2(this._features, config.featureFlags, this._featuresIndex);
          this._user = _$assign_10({}, config.user);
          this._context = config.context;
          if (config.logger)
            this._logger = config.logger;
          if (config.onError)
            this._cbs.e = this._cbs.e.concat(config.onError);
          if (config.onBreadcrumb)
            this._cbs.b = this._cbs.b.concat(config.onBreadcrumb);
          if (config.onSession)
            this._cbs.s = this._cbs.s.concat(config.onSession);
          if (_$keys_14(errors).length) {
            this._logger.warn(generateConfigErrorMessage(errors, opts));
          }
          return config;
        };
        _proto.getUser = function getUser() {
          return this._user;
        };
        _proto.setUser = function setUser(id, email, name2) {
          this._user = {
            id,
            email,
            name: name2
          };
        };
        _proto._loadPlugin = function _loadPlugin(plugin) {
          var result = plugin.load(this);
          if (plugin.name)
            this._plugins["~" + plugin.name + "~"] = result;
          return this;
        };
        _proto.getPlugin = function getPlugin(name2) {
          return this._plugins["~" + name2 + "~"];
        };
        _proto._setDelivery = function _setDelivery(d) {
          this._delivery = d(this);
        };
        _proto.startSession = function startSession() {
          var session = new _$Session_32();
          session.app.releaseStage = this._config.releaseStage;
          session.app.version = this._config.appVersion;
          session.app.type = this._config.appType;
          session._user = _$assign_10({}, this._user);
          var ignore = _$syncCallbackRunner_24(this._cbs.s, session, "onSession", this._logger);
          if (ignore) {
            this._logger.debug("Session not started due to onSession callback");
            return this;
          }
          return this._sessionDelegate.startSession(this, session);
        };
        _proto.addOnError = function addOnError(fn, front) {
          if (front === void 0) {
            front = false;
          }
          this._cbs.e[front ? "unshift" : "push"](fn);
        };
        _proto.removeOnError = function removeOnError(fn) {
          this._cbs.e = _$filter_11(this._cbs.e, function(f) {
            return f !== fn;
          });
        };
        _proto._addOnSessionPayload = function _addOnSessionPayload(fn) {
          this._cbs.sp.push(fn);
        };
        _proto.addOnSession = function addOnSession(fn) {
          this._cbs.s.push(fn);
        };
        _proto.removeOnSession = function removeOnSession(fn) {
          this._cbs.s = _$filter_11(this._cbs.s, function(f) {
            return f !== fn;
          });
        };
        _proto.addOnBreadcrumb = function addOnBreadcrumb(fn, front) {
          if (front === void 0) {
            front = false;
          }
          this._cbs.b[front ? "unshift" : "push"](fn);
        };
        _proto.removeOnBreadcrumb = function removeOnBreadcrumb(fn) {
          this._cbs.b = _$filter_11(this._cbs.b, function(f) {
            return f !== fn;
          });
        };
        _proto.pauseSession = function pauseSession() {
          return this._sessionDelegate.pauseSession(this);
        };
        _proto.resumeSession = function resumeSession() {
          return this._sessionDelegate.resumeSession(this);
        };
        _proto.leaveBreadcrumb = function leaveBreadcrumb(message, metadata, type) {
          message = typeof message === "string" ? message : "";
          type = typeof type === "string" && _$includes_12(_$breadcrumbTypes_6, type) ? type : "manual";
          metadata = typeof metadata === "object" && metadata !== null ? metadata : {};
          if (!message)
            return;
          var crumb = new _$Breadcrumb_1(message, metadata, type);
          var ignore = _$syncCallbackRunner_24(this._cbs.b, crumb, "onBreadcrumb", this._logger);
          if (ignore) {
            this._logger.debug("Breadcrumb not attached due to onBreadcrumb callback");
            return;
          }
          this._breadcrumbs.push(crumb);
          if (this._breadcrumbs.length > this._config.maxBreadcrumbs) {
            this._breadcrumbs = this._breadcrumbs.slice(this._breadcrumbs.length - this._config.maxBreadcrumbs);
          }
        };
        _proto._isBreadcrumbTypeEnabled = function _isBreadcrumbTypeEnabled(type) {
          var types = this._config.enabledBreadcrumbTypes;
          return types === null || _$includes_12(types, type);
        };
        _proto.notify = function notify(maybeError, onError, postReportCallback) {
          if (postReportCallback === void 0) {
            postReportCallback = noop;
          }
          var event = _$Event_4.create(maybeError, true, void 0, "notify()", this._depth + 1, this._logger);
          this._notify(event, onError, postReportCallback);
        };
        _proto._notify = function _notify(event, onError, postReportCallback) {
          var _this2 = this;
          if (postReportCallback === void 0) {
            postReportCallback = noop;
          }
          event.app = _$assign_10({}, event.app, {
            releaseStage: this._config.releaseStage,
            version: this._config.appVersion,
            type: this._config.appType
          });
          event.context = event.context || this._context;
          event._metadata = _$assign_10({}, event._metadata, this._metadata);
          event._user = _$assign_10({}, event._user, this._user);
          event.breadcrumbs = this._breadcrumbs.slice();
          __merge_2(event._features, this._features, event._featuresIndex);
          if (this._config.enabledReleaseStages !== null && !_$includes_12(this._config.enabledReleaseStages, this._config.releaseStage)) {
            this._logger.warn("Event not sent due to releaseStage/enabledReleaseStages configuration");
            return postReportCallback(null, event);
          }
          var originalSeverity = event.severity;
          var onCallbackError = function(err) {
            _this2._logger.error("Error occurred in onError callback, continuing anyway\u2026");
            _this2._logger.error(err);
          };
          var callbacks = [].concat(this._cbs.e).concat(onError);
          _$callbackRunner_7(callbacks, event, onCallbackError, function(err, shouldSend) {
            if (err)
              onCallbackError(err);
            if (!shouldSend) {
              _this2._logger.debug("Event not sent due to onError callback");
              return postReportCallback(null, event);
            }
            if (_this2._isBreadcrumbTypeEnabled("error")) {
              Client2.prototype.leaveBreadcrumb.call(_this2, event.errors[0].errorClass, {
                errorClass: event.errors[0].errorClass,
                errorMessage: event.errors[0].errorMessage,
                severity: event.severity
              }, "error");
            }
            if (originalSeverity !== event.severity) {
              event._handledState.severityReason = {
                type: "userCallbackSetSeverity"
              };
            }
            if (event.unhandled !== event._handledState.unhandled) {
              event._handledState.severityReason.unhandledOverridden = true;
              event._handledState.unhandled = event.unhandled;
            }
            if (_this2._session) {
              _this2._session._track(event);
              event._session = _this2._session;
            }
            _this2._delivery.sendEvent({
              apiKey: event.apiKey || _this2._config.apiKey,
              notifier: _this2._notifier,
              events: [event]
            }, function(err2) {
              return postReportCallback(err2, event);
            });
          });
        };
        return Client2;
      }();
      var generateConfigErrorMessage = function(errors, rawInput) {
        var er = new Error("Invalid configuration\n" + _$map_15(_$keys_14(errors), function(key) {
          return "  - " + key + " " + errors[key] + ", got " + stringify(rawInput[key]);
        }).join("\n\n"));
        return er;
      };
      var stringify = function(val) {
        switch (typeof val) {
          case "string":
          case "number":
          case "object":
            return JSON.stringify(val);
          default:
            return String(val);
        }
      };
      var _$Client_2 = Client;
      var _$jsonPayload_20 = {};
      ;
      var EVENT_REDACTION_PATHS = ["events.[].metaData", "events.[].breadcrumbs.[].metaData", "events.[].request"];
      _$jsonPayload_20.event = function(event, redactedKeys) {
        var payload = _$safeJsonStringify_31(event, null, null, {
          redactedPaths: EVENT_REDACTION_PATHS,
          redactedKeys
        });
        if (payload.length > 1e6) {
          event.events[0]._metadata = {
            notifier: "WARNING!\nSerialized payload was " + payload.length / 1e6 + "MB (limit = 1MB)\nmetadata was removed"
          };
          payload = _$safeJsonStringify_31(event, null, null, {
            redactedPaths: EVENT_REDACTION_PATHS,
            redactedKeys
          });
        }
        return payload;
      };
      _$jsonPayload_20.session = function(session, redactedKeys) {
        var payload = _$safeJsonStringify_31(session, null, null);
        return payload;
      };
      var http = __require("http");
      var https = __require("https");
      var ___require_34 = __require("url"), parse = ___require_34.parse;
      var _$request_34 = function(_ref, cb) {
        var url2 = _ref.url, headers = _ref.headers, body = _ref.body, agent = _ref.agent;
        var didError = false;
        var onError = function(err) {
          if (didError)
            return;
          didError = true;
          cb(err);
        };
        var parsedUrl = parse(url2);
        var secure = parsedUrl.protocol === "https:";
        var transport = secure ? https : http;
        var req = transport.request({
          method: "POST",
          hostname: parsedUrl.hostname,
          port: parsedUrl.port,
          path: parsedUrl.path,
          headers,
          agent
        });
        req.on("error", onError);
        req.on("response", function(res) {
          bufferResponse(res, function(err, body2) {
            if (err)
              return onError(err);
            if (res.statusCode < 200 || res.statusCode >= 300) {
              return onError(new Error("Bad statusCode from API: " + res.statusCode + "\n" + body2));
            }
            cb(null, body2);
          });
        });
        req.write(body);
        req.end();
      };
      var bufferResponse = function(stream, cb) {
        var data = "";
        stream.on("error", cb);
        stream.setEncoding("utf8");
        stream.on("data", function(d) {
          data += d;
        });
        stream.on("end", function() {
          return cb(null, data);
        });
      };
      ;
      ;
      var _$delivery_33 = function(client) {
        return {
          sendEvent: function(event, cb) {
            if (cb === void 0) {
              cb = function() {
              };
            }
            var body = _$jsonPayload_20.event(event, client._config.redactedKeys);
            var _cb = function(err) {
              if (err)
                client._logger.error("Event failed to send\u2026\n" + (err && err.stack ? err.stack : err), err);
              if (body.length > 1e6) {
                client._logger.warn("Event oversized (" + (body.length / 1e6).toFixed(2) + " MB)");
              }
              cb(err);
            };
            try {
              _$request_34({
                url: client._config.endpoints.notify,
                headers: {
                  "Content-Type": "application/json",
                  "Bugsnag-Api-Key": event.apiKey || client._config.apiKey,
                  "Bugsnag-Payload-Version": "4",
                  "Bugsnag-Sent-At": (/* @__PURE__ */ new Date()).toISOString()
                },
                body,
                agent: client._config.agent
              }, function(err, body2) {
                return _cb(err);
              });
            } catch (e) {
              _cb(e);
            }
          },
          sendSession: function(session, cb) {
            if (cb === void 0) {
              cb = function() {
              };
            }
            var _cb = function(err) {
              if (err)
                client._logger.error("Session failed to send\u2026\n" + (err && err.stack ? err.stack : err), err);
              cb(err);
            };
            try {
              _$request_34({
                url: client._config.endpoints.sessions,
                headers: {
                  "Content-Type": "application/json",
                  "Bugsnag-Api-Key": client._config.apiKey,
                  "Bugsnag-Payload-Version": "1",
                  "Bugsnag-Sent-At": (/* @__PURE__ */ new Date()).toISOString()
                },
                body: _$jsonPayload_20.session(session, client._config.redactedKeys),
                agent: client._config.agent
              }, function(err) {
                return _cb(err);
              });
            } catch (e) {
              _cb(e);
            }
          }
        };
      };
      function _extends() {
        _extends = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      var schema = _$config_3.schema;
      ;
      var __os_35 = __require("os");
      var _require2 = __require("util"), inspect = _require2.inspect;
      var _$config_35 = {
        appType: _extends({}, schema.appType, {
          defaultValue: function() {
            return "node";
          }
        }),
        projectRoot: {
          defaultValue: function() {
            return process.cwd();
          },
          validate: function(value) {
            return value === null || _$stringWithLength_27(value);
          },
          message: "should be string"
        },
        hostname: {
          defaultValue: function() {
            return __os_35.hostname();
          },
          message: "should be a string",
          validate: function(value) {
            return value === null || _$stringWithLength_27(value);
          }
        },
        logger: _extends({}, schema.logger, {
          defaultValue: function() {
            return getPrefixedConsole();
          }
        }),
        releaseStage: _extends({}, schema.releaseStage, {
          defaultValue: function() {
            return process.env.NODE_ENV || "production";
          }
        }),
        agent: {
          defaultValue: function() {
            return void 0;
          },
          message: "should be an HTTP(s) agent",
          validate: function(value) {
            return value === void 0 || isAgent(value);
          }
        },
        onUncaughtException: {
          defaultValue: function() {
            return function(err, event, logger) {
              logger.error("Uncaught exception" + getContext(event) + ", the process will now terminate\u2026\n" + printError(err));
              process.exit(1);
            };
          },
          message: "should be a function",
          validate: function(value) {
            return typeof value === "function";
          }
        },
        onUnhandledRejection: {
          defaultValue: function() {
            return function(err, event, logger) {
              logger.error("Unhandled rejection" + getContext(event) + "\u2026\n" + printError(err));
            };
          },
          message: "should be a function",
          validate: function(value) {
            return typeof value === "function";
          }
        }
      };
      var printError = function(err) {
        return err && err.stack ? err.stack : inspect(err);
      };
      var getPrefixedConsole = function() {
        return ["debug", "info", "warn", "error"].reduce(function(accum, method) {
          var consoleMethod = console[method] || console.log;
          accum[method] = consoleMethod.bind(console, "[bugsnag]");
          return accum;
        }, {});
      };
      var getContext = function(event) {
        return event.request && Object.keys(event.request).length ? " at " + event.request.httpMethod + " " + (event.request.path || event.request.url) : "";
      };
      var isAgent = function(value) {
        return typeof value === "object" && value !== null || typeof value === "boolean";
      };
      var appStart = /* @__PURE__ */ new Date();
      var reset = function() {
        appStart = /* @__PURE__ */ new Date();
      };
      var _$app_37 = {
        name: "appDuration",
        load: function(client) {
          client.addOnError(function(event) {
            var now = /* @__PURE__ */ new Date();
            event.app.duration = now - appStart;
          }, true);
          return {
            reset
          };
        }
      };
      var _$nodeFallbackStack_22 = {};
      _$nodeFallbackStack_22.getStack = function() {
        return new Error().stack.split("\n").slice(3).join("\n");
      };
      _$nodeFallbackStack_22.maybeUseFallbackStack = function(err, fallbackStack) {
        var lines = err.stack.split("\n");
        if (lines.length === 1 || lines.length === 2 && /at Error \(native\)/.test(lines[1])) {
          err.stack = lines[0] + "\n" + fallbackStack;
        }
        return err;
      };
      var _$contextualize_38 = {};
      var domain = __require("domain");
      var getStack = _$nodeFallbackStack_22.getStack, maybeUseFallbackStack = _$nodeFallbackStack_22.maybeUseFallbackStack;
      _$contextualize_38 = {
        name: "contextualize",
        load: function(client) {
          var contextualize = function(fn, onError) {
            var fallbackStack = getStack();
            var dom = domain.create();
            dom.on("error", function(err) {
              if (err.stack)
                maybeUseFallbackStack(err, fallbackStack);
              var event = client.Event.create(err, true, {
                severity: "error",
                unhandled: true,
                severityReason: {
                  type: "unhandledException"
                }
              }, "contextualize()", 1);
              client._notify(event, onError, function(e, event2) {
                if (e)
                  client._logger.error("Failed to send event to Bugsnag");
                client._config.onUncaughtException(err, event2, client._logger);
              });
            });
            process.nextTick(function() {
              return dom.run(fn);
            });
          };
          return contextualize;
        }
      };
      _$contextualize_38["default"] = _$contextualize_38;
      var _$intercept_39 = {};
      var __getStack_39 = _$nodeFallbackStack_22.getStack, __maybeUseFallbackStack_39 = _$nodeFallbackStack_22.maybeUseFallbackStack;
      _$intercept_39 = {
        name: "intercept",
        load: function(client) {
          var intercept = function(onError, cb) {
            if (onError === void 0) {
              onError = function() {
              };
            }
            if (typeof cb !== "function") {
              cb = onError;
              onError = function() {
              };
            }
            var fallbackStack = __getStack_39();
            return function(err) {
              if (err) {
                if (err.stack)
                  __maybeUseFallbackStack_39(err, fallbackStack);
                var event = client.Event.create(err, true, {
                  severity: "warning",
                  unhandled: false,
                  severityReason: {
                    type: "callbackErrorIntercept"
                  }
                }, "intercept()", 1);
                client._notify(event, onError);
                return;
              }
              for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                data[_key - 1] = arguments[_key];
              }
              cb.apply(void 0, data);
            };
          };
          return intercept;
        }
      };
      _$intercept_39["default"] = _$intercept_39;
      function ___extends_40() {
        ___extends_40 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return ___extends_40.apply(this, arguments);
      }
      var __os_40 = __require("os");
      var _$device_40 = {
        load: function(client) {
          var device = {
            osName: __os_40.platform() + " (" + __os_40.arch() + ")",
            osVersion: __os_40.release(),
            totalMemory: __os_40.totalmem(),
            hostname: client._config.hostname,
            runtimeVersions: {
              node: process.versions.node
            }
          };
          client._addOnSessionPayload(function(sp) {
            sp.device = ___extends_40({}, sp.device, device);
          });
          client.addOnError(function(event) {
            event.device = ___extends_40({}, event.device, device, {
              freeMemory: __os_40.freemem(),
              time: /* @__PURE__ */ new Date()
            });
          }, true);
        }
      };
      var ___require_23 = __require("path"), join = ___require_23.join, resolve = ___require_23.resolve;
      var _$pathNormalizer_23 = function(p) {
        return join(resolve(p), "/");
      };
      ;
      var _$inProject_41 = {
        load: function(client) {
          return client.addOnError(function(event) {
            if (!client._config.projectRoot)
              return;
            var projectRoot = _$pathNormalizer_23(client._config.projectRoot);
            var allFrames = event.errors.reduce(function(accum, er) {
              return accum.concat(er.stacktrace);
            }, []);
            allFrames.map(function(stackframe) {
              stackframe.inProject = typeof stackframe.file === "string" && stackframe.file.indexOf(projectRoot) === 0 && !/\/node_modules\//.test(stackframe.file);
            });
          });
        }
      };
      function ___extends_42() {
        ___extends_42 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return ___extends_42.apply(this, arguments);
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      var SURROUNDING_LINES = 3;
      var MAX_LINE_LENGTH = 200;
      var ___require_42 = __require("fs"), createReadStream = ___require_42.createReadStream;
      var ___require2_42 = __require("stream"), Writable = ___require2_42.Writable;
      var pump = require_pump();
      var byline = require_byline();
      var path = __require("path");
      var _$surroundingCode_42 = {
        load: function(client) {
          if (!client._config.sendCode)
            return;
          var loadSurroundingCode = function(stackframe, cache) {
            return new Promise(function(resolve2, reject) {
              try {
                if (!stackframe.lineNumber || !stackframe.file)
                  return resolve2(stackframe);
                var file = path.resolve(client._config.projectRoot, stackframe.file);
                var cacheKey = file + "@" + stackframe.lineNumber;
                if (cacheKey in cache) {
                  stackframe.code = cache[cacheKey];
                  return resolve2(stackframe);
                }
                getSurroundingCode(file, stackframe.lineNumber, function(err, code) {
                  if (err)
                    return resolve2(stackframe);
                  stackframe.code = cache[cacheKey] = code;
                  return resolve2(stackframe);
                });
              } catch (e) {
                return resolve2(stackframe);
              }
            });
          };
          client.addOnError(function(event) {
            return new Promise(function(resolve2, reject) {
              var cache = /* @__PURE__ */ Object.create(null);
              var allFrames = event.errors.reduce(function(accum, er) {
                return accum.concat(er.stacktrace);
              }, []);
              pMapSeries(allFrames.map(function(stackframe) {
                return function() {
                  return loadSurroundingCode(stackframe, cache);
                };
              })).then(resolve2)["catch"](reject);
            });
          });
        },
        configSchema: {
          sendCode: {
            defaultValue: function() {
              return true;
            },
            validate: function(value) {
              return value === true || value === false;
            },
            message: "should be true or false"
          }
        }
      };
      var getSurroundingCode = function(file, lineNumber, cb) {
        var start = lineNumber - SURROUNDING_LINES;
        var end = lineNumber + SURROUNDING_LINES;
        var reader = createReadStream(file, {
          encoding: "utf8"
        });
        var splitter = new byline.LineStream({
          keepEmptyLines: true
        });
        var slicer = new CodeRange({
          start,
          end
        });
        slicer.on("done", function() {
          return reader.destroy();
        });
        pump(reader, splitter, slicer, function(err) {
          if (err && err.message !== "premature close")
            return cb(err);
          cb(null, slicer.getCode());
        });
      };
      var CodeRange = /* @__PURE__ */ function(_Writable) {
        _inheritsLoose(CodeRange2, _Writable);
        function CodeRange2(opts) {
          var _this;
          _this = _Writable.call(this, ___extends_42({}, opts, {
            decodeStrings: false
          })) || this;
          _this._start = opts.start;
          _this._end = opts.end;
          _this._n = 0;
          _this._code = {};
          return _this;
        }
        var _proto = CodeRange2.prototype;
        _proto._write = function _write(chunk, enc, cb) {
          this._n++;
          if (this._n < this._start)
            return cb(null);
          if (this._n <= this._end) {
            this._code[String(this._n)] = chunk.length <= MAX_LINE_LENGTH ? chunk : chunk.substr(0, MAX_LINE_LENGTH);
            return cb(null);
          }
          this.emit("done");
          return cb(null);
        };
        _proto.getCode = function getCode() {
          return this._code;
        };
        return CodeRange2;
      }(Writable);
      var pMapSeries = function(ps) {
        return new Promise(function(resolve2, reject) {
          var res = [];
          ps.reduce(function(accum, p) {
            return accum.then(function(r) {
              res.push(r);
              return p();
            });
          }, Promise.resolve()).then(function(r) {
            res.push(r);
          }).then(function() {
            resolve2(res.slice(1));
          });
        });
      };
      var _handler;
      var _$uncaughtException_43 = {
        load: function(client) {
          if (!client._config.autoDetectErrors)
            return;
          if (!client._config.enabledErrorTypes.unhandledExceptions)
            return;
          _handler = function(err) {
            var event = client.Event.create(err, false, {
              severity: "error",
              unhandled: true,
              severityReason: {
                type: "unhandledException"
              }
            }, "uncaughtException handler", 1);
            client._notify(event, function() {
            }, function(e, event2) {
              if (e)
                client._logger.error("Failed to send event to Bugsnag");
              client._config.onUncaughtException(err, event2, client._logger);
            });
          };
          process.on("uncaughtException", _handler);
        },
        destroy: function() {
          process.removeListener("uncaughtException", _handler);
        }
      };
      var ___handler_44;
      var _$unhandledRejection_44 = {
        load: function(client) {
          if (!client._config.autoDetectErrors || !client._config.enabledErrorTypes.unhandledRejections)
            return;
          ___handler_44 = function(err) {
            var event = client.Event.create(err, false, {
              severity: "error",
              unhandled: true,
              severityReason: {
                type: "unhandledPromiseRejection"
              }
            }, "unhandledRejection handler", 1);
            return new Promise(function(resolve2) {
              client._notify(event, function() {
              }, function(e, event2) {
                if (e)
                  client._logger.error("Failed to send event to Bugsnag");
                client._config.onUnhandledRejection(err, event2, client._logger);
                resolve2();
              });
            });
          };
          if (process.prependListener) {
            process.prependListener("unhandledRejection", ___handler_44);
          } else {
            process.on("unhandledRejection", ___handler_44);
          }
        },
        destroy: function() {
          process.removeListener("unhandledRejection", ___handler_44);
        }
      };
      var _$cloneClient_8 = {};
      ;
      var onCloneCallbacks = [];
      _$cloneClient_8 = function(client) {
        var clone = new client.Client({}, {}, [], client._notifier);
        clone._config = client._config;
        clone._breadcrumbs = client._breadcrumbs.slice();
        clone._metadata = _$assign_10({}, client._metadata);
        clone._features = [].concat(client._features);
        clone._featuresIndex = _$assign_10({}, client._featuresIndex);
        clone._user = _$assign_10({}, client._user);
        clone._context = client._context;
        clone._cbs = {
          e: client._cbs.e.slice(),
          s: client._cbs.s.slice(),
          sp: client._cbs.sp.slice(),
          b: client._cbs.b.slice()
        };
        clone._logger = client._logger;
        clone._delivery = client._delivery;
        clone._sessionDelegate = client._sessionDelegate;
        onCloneCallbacks.forEach(function(callback) {
          callback(clone);
        });
        return clone;
      };
      _$cloneClient_8.registerCallback = function(callback) {
        onCloneCallbacks.push(callback);
      };
      var _$Backoff_45 = Backoff;
      function Backoff(opts) {
        opts = opts || {};
        this.ms = opts.min || 100;
        this.max = opts.max || 1e4;
        this.factor = opts.factor || 2;
        this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
        this.attempts = 0;
      }
      Backoff.prototype.duration = function() {
        var ms = this.ms * Math.pow(this.factor, this.attempts++);
        if (this.jitter) {
          var rand = Math.random();
          var deviation = Math.floor(rand * this.jitter * ms);
          ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
        }
        return Math.min(ms, this.max) | 0;
      };
      Backoff.prototype.reset = function() {
        this.attempts = 0;
      };
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function ___inheritsLoose_47(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        ___setPrototypeOf_47(subClass, superClass);
      }
      function ___setPrototypeOf_47(o, p) {
        ___setPrototypeOf_47 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return ___setPrototypeOf_47(o, p);
      }
      var DEFAULT_SUMMARY_INTERVAL = 10 * 1e3;
      var Emitter = __require("events").EventEmitter;
      var _$tracker_47 = /* @__PURE__ */ function(_Emitter) {
        ___inheritsLoose_47(SessionTracker, _Emitter);
        function SessionTracker(intervalLength) {
          var _this;
          _this = _Emitter.call(this) || this;
          _this._sessions = /* @__PURE__ */ new Map();
          _this._interval = null;
          _this._intervalLength = intervalLength || DEFAULT_SUMMARY_INTERVAL;
          _this._summarize = _this._summarize.bind(_assertThisInitialized(_this));
          return _this;
        }
        var _proto = SessionTracker.prototype;
        _proto.start = function start() {
          if (!this._interval) {
            this._interval = setInterval(this._summarize, this._intervalLength).unref();
          }
        };
        _proto.stop = function stop() {
          clearInterval(this._interval);
          this._interval = null;
        };
        _proto.track = function track(session) {
          var key = dateToMsKey(session.startedAt);
          var cur = this._sessions.get(key);
          this._sessions.set(key, typeof cur === "undefined" ? 1 : cur + 1);
          return session;
        };
        _proto._summarize = function _summarize() {
          var _this2 = this;
          var summary = [];
          this._sessions.forEach(function(val, key) {
            summary.push({
              startedAt: key,
              sessionsStarted: val
            });
            _this2._sessions["delete"](key);
          });
          if (!summary.length)
            return;
          this.emit("summary", summary);
        };
        return SessionTracker;
      }(Emitter);
      var dateToMsKey = function(d) {
        var dk = new Date(d);
        dk.setSeconds(0);
        dk.setMilliseconds(0);
        return dk.toISOString();
      };
      ;
      ;
      ;
      ;
      ;
      var _$session_46 = {
        load: function(client) {
          var sessionTracker = new _$tracker_47(client._config.sessionSummaryInterval);
          sessionTracker.on("summary", sendSessionSummary(client));
          sessionTracker.start();
          client._sessionDelegate = {
            startSession: function(client2, session) {
              var sessionClient = _$cloneClient_8(client2);
              sessionClient._session = session;
              sessionClient._pausedSession = null;
              sessionTracker.track(sessionClient._session);
              return sessionClient;
            },
            pauseSession: function(client2) {
              client2._pausedSession = client2._session;
              client2._session = null;
            },
            resumeSession: function(client2) {
              if (client2._session) {
                return client2;
              }
              if (client2._pausedSession) {
                client2._session = client2._pausedSession;
                client2._pausedSession = null;
                return client2;
              }
              return client2.startSession();
            }
          };
        },
        configSchema: {
          sessionSummaryInterval: {
            defaultValue: function() {
              return void 0;
            },
            validate: function(value) {
              return value === void 0 || _$intRange_25()(value);
            },
            message: "should be a positive integer"
          }
        }
      };
      var sendSessionSummary = function(client) {
        return function(sessionCounts) {
          if (client._config.enabledReleaseStages !== null && !client._config.enabledReleaseStages.includes(client._config.releaseStage)) {
            client._logger.warn("Session not sent due to releaseStage/enabledReleaseStages configuration");
            return;
          }
          if (!sessionCounts.length)
            return;
          var backoff = new _$Backoff_45({
            min: 1e3,
            max: 1e4
          });
          var maxAttempts = 10;
          req(handleRes);
          function handleRes(err) {
            if (!err) {
              var sessionCount = sessionCounts.reduce(function(accum, s) {
                return accum + s.sessionsStarted;
              }, 0);
              return client._logger.debug(sessionCount + " session(s) reported");
            }
            if (backoff.attempts === 10) {
              client._logger.error("Session delivery failed, max retries exceeded", err);
              return;
            }
            client._logger.debug("Session delivery failed, retry #" + (backoff.attempts + 1) + "/" + maxAttempts, err);
            setTimeout(function() {
              return req(handleRes);
            }, backoff.duration());
          }
          function req(cb) {
            var payload = {
              notifier: client._notifier,
              device: {},
              app: {
                releaseStage: client._config.releaseStage,
                version: client._config.appVersion,
                type: client._config.appType
              },
              sessionCounts
            };
            var ignore = _$syncCallbackRunner_24(client._cbs.sp, payload, "onSessionPayload", client._logger);
            if (ignore) {
              client._logger.debug("Session not sent due to onSessionPayload callback");
              return cb(null);
            }
            client._delivery.sendSession(payload, cb);
          }
        };
      };
      var _$pathNormaliser_48 = {
        load: function(client) {
          client.addOnError(function(event) {
            var allFrames = event.errors.reduce(function(accum, er) {
              return accum.concat(er.stacktrace);
            }, []);
            allFrames.forEach(function(stackframe) {
              if (typeof stackframe.file !== "string") {
                return;
              }
              stackframe.file = stackframe.file.replace(/\\/g, "/");
            });
          });
        }
      };
      ;
      var _$stripProjectRoot_49 = {
        load: function(client) {
          return client.addOnError(function(event) {
            if (!client._config.projectRoot)
              return;
            var projectRoot = _$pathNormalizer_23(client._config.projectRoot);
            var allFrames = event.errors.reduce(function(accum, er) {
              return accum.concat(er.stacktrace);
            }, []);
            allFrames.map(function(stackframe) {
              if (typeof stackframe.file === "string" && stackframe.file.indexOf(projectRoot) === 0) {
                stackframe.file = stackframe.file.replace(projectRoot, "");
              }
            });
          });
        }
      };
      var _$notifier_36 = {};
      function ___extends_36() {
        ___extends_36 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return ___extends_36.apply(this, arguments);
      }
      var name = "Bugsnag Node";
      var version = "7.22.7";
      var url = "https://github.com/bugsnag/bugsnag-js";
      ;
      ;
      ;
      ;
      _$Event_4.__type = "nodejs";
      ;
      var __schema_36 = ___extends_36({}, _$config_3.schema, _$config_35);
      delete __schema_36.enabledBreadcrumbTypes;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      ;
      var internalPlugins = [_$app_37, _$surroundingCode_42, _$inProject_41, _$stripProjectRoot_49, _$session_46, _$device_40, _$uncaughtException_43, _$unhandledRejection_44, _$intercept_39, _$contextualize_38, _$pathNormaliser_48];
      var Bugsnag = {
        _client: null,
        createClient: function(opts) {
          if (typeof opts === "string")
            opts = {
              apiKey: opts
            };
          if (!opts)
            opts = {};
          var bugsnag = new _$Client_2(opts, __schema_36, internalPlugins, {
            name,
            version,
            url
          });
          bugsnag._setDelivery(_$delivery_33);
          bugsnag._logger.debug("Loaded!");
          bugsnag.leaveBreadcrumb = function() {
            bugsnag._logger.warn("Breadcrumbs are not supported in Node.js yet");
          };
          bugsnag._config.enabledBreadcrumbTypes = [];
          return bugsnag;
        },
        start: function(opts) {
          if (Bugsnag._client) {
            Bugsnag._client._logger.warn("Bugsnag.start() was called more than once. Ignoring.");
            return Bugsnag._client;
          }
          Bugsnag._client = Bugsnag.createClient(opts);
          return Bugsnag._client;
        },
        isStarted: function() {
          return Bugsnag._client != null;
        }
      };
      Object.keys(_$Client_2.prototype).forEach(function(m) {
        if (/^_/.test(m))
          return;
        Bugsnag[m] = function() {
          if (!Bugsnag._client)
            return console.error("Bugsnag." + m + "() was called before Bugsnag.start()");
          Bugsnag._client._depth += 1;
          var ret = Bugsnag._client[m].apply(Bugsnag._client, arguments);
          Bugsnag._client._depth -= 1;
          return ret;
        };
      });
      _$notifier_36 = Bugsnag;
      _$notifier_36.Client = _$Client_2;
      _$notifier_36.Event = _$Event_4;
      _$notifier_36.Session = _$Session_32;
      _$notifier_36.Breadcrumb = _$Breadcrumb_1;
      _$notifier_36["default"] = Bugsnag;
      return _$notifier_36;
    });
  }
});

// ../../node_modules/.pnpm/@bugsnag+js@7.21.0/node_modules/@bugsnag/js/node/notifier.js
var require_notifier = __commonJS({
  "../../node_modules/.pnpm/@bugsnag+js@7.21.0/node_modules/@bugsnag/js/node/notifier.js"(exports, module) {
    init_cjs_shims();
    module.exports = require_bugsnag();
  }
});

export {
  require_error_stack_parser,
  require_iserror,
  require_stack_generator,
  require_end_of_stream,
  require_pump,
  require_byline,
  require_notifier
};
//# sourceMappingURL=chunk-S4VBXFXP.js.map

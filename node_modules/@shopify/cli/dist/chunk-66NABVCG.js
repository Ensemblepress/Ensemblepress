import {
  execa,
  outputContent,
  outputDebug
} from "./chunk-WAEWSGBK.js";
import {
  init_cjs_shims
} from "./chunk-ZPL24Y2D.js";

// ../cli-kit/src/public/node/os.ts
init_cjs_shims();
import { userInfo as osUserInfo } from "os";
async function username(platform = process.platform) {
  outputDebug(outputContent`Obtaining user name...`);
  const environmentVariable = getEnvironmentVariable();
  if (environmentVariable) {
    return environmentVariable;
  }
  const userInfoUsername = getUsernameFromOsUserInfo();
  if (userInfoUsername) {
    return userInfoUsername;
  }
  try {
    if (platform === "win32") {
      const { stdout } = await execa("whoami");
      return cleanWindowsCommand(stdout);
    }
    const { stdout: userId } = await execa("id", ["-u"]);
    try {
      const { stdout } = await execa("id", ["-un", userId]);
      return stdout;
    } catch {
    }
    return makeUsernameFromId(userId);
  } catch {
    return null;
  }
}
function platformAndArch(platform = process.platform, arch = process.arch) {
  let archString;
  if (arch === "x64") {
    archString = "amd64";
  } else if (arch === "ia32") {
    archString = "386";
  } else {
    archString = arch;
  }
  const platformString = platform.match(/^win.+/) ? "windows" : platform;
  return { platform: platformString, arch: archString };
}
function getEnvironmentVariable() {
  const { env } = process;
  return env.SUDO_USER || env.C9_USER || env.LOGNAME || env.USER || env.LNAME || env.USERNAME;
}
function getUsernameFromOsUserInfo() {
  try {
    return osUserInfo().username;
  } catch {
    return null;
  }
}
function cleanWindowsCommand(value) {
  return value.replace(/^.*\\/, "");
}
function makeUsernameFromId(userId) {
  return `no-username-${userId}`;
}

export {
  username,
  platformAndArch
};
//# sourceMappingURL=chunk-66NABVCG.js.map

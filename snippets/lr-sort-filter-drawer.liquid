<div class="ReactModal__Overlay ReactModal__Overlay--before-open overlay overlay-filters">
  <div class="ReactModal__Content ReactModal__Content--before-open overlay-panel" tabindex="-1" role="dialog" aria-modal="true">
    <div class="overlay-close" id="closeModal"><span>Ã—</span></div>
    <div class="overlay-panel-inner">
      <div class="overlay-outer-title">{{ 'products.facets.sort_by_label' | t }}</div>
      <div class="filter-panel">
        <div class="filter-items">
          <div class="filter-item">
            <div class="filter-item-title">
              {{ 'products.facets.sort_by_label' | t }}
            </div>
             <div class="filter-item-options">
               <ul class="filter-selector">
                 <!--<li>
                    <div class="filter-option ">
                      <span><input type="radio" name="sort" value="default" checked> Default</span>
                    </div>
                 </li>-->
                 <li>
                   <label class="filter-option" tabindex="0">
                      <div class="sort_option">
                        <input class="sort_option_input" type="radio" name="sort" value="newold" onkeydown="if(event.key === 'Enter' || event.key === ' ') this.click();">
                          <span class="filter-option-title">Newest</span>                      
                      </div>
                     </label>
                 </li>
                 <li>
                    <label class="filter-option" tabindex="0">
                      <div class="sort_option">
                       <input class="sort_option_input" type="radio" name="sort" value="az"  onkeydown="if(event.key === 'Enter' || event.key === ' ') this.click();">
                          <span class="filter-option-title">Title A-Z</span>                  
                        </div>
                    </label>
                 </li>
                 <li>
                   <label class="filter-option" tabindex="0">
                      <div class="sort_option">
                        <input class="sort_option_input" type="radio" name="sort" value="za" onkeydown="if(event.key === 'Enter' || event.key === ' ') this.click();">
                          <span class="filter-option-title">Title Z-A</span>                    
                      </div>
                     </label>
                 </li>
                 <li>
                   <label class="filter-option" tabindex="0">
                    <div class="sort_option">
                      <input class="sort_option_input" type="radio" name="sort" value="lowprice" onkeydown="if(event.key === 'Enter' || event.key === ' ') this.click();">
                        <span class="filter-option-title">Price ascending</span>                     
                    </div>
                   </label>
                 </li>
                 <li>
                   <label class="filter-option" tabindex="0">
                      <div class="sort_option">
                        <input class="sort_option_input" type="radio" name="sort" value="highprice" onkeydown="if(event.key === 'Enter' || event.key === ' ') this.click();">
                          <span class="filter-option-title">Price descendeing</span>
                      </div>
                   </label>
                 </li>
                 <!--<li>
                   <label class="filter-option" tabindex="0">
                    <div class="sort_option">
                      <input class="sort_option_input" type="radio" name="sort" value="oldnew" onkeydown="if(event.key === 'Enter' || event.key === ' ') this.click();">
                        <span class="filter-option-title">Oldest</span>
                      </div>
                     </label>
                 </li>-->
                 <li>
                   <label class="filter-option" tabindex="0" >
                    <div class="sort_option">
                      <input class="sort_option_input" type="radio" name="sort" value="instock" onkeydown="if(event.key === 'Enter' || event.key === ' ') this.click();">
                        <span class="filter-option-title">In Stock</span>
                      </div>
                    </label>
                 </li>
               </ul>  
            </div>
          </div>
        </div>
        <div class="filter-button">
          <button id="apply-sort" class="button button-inverted">{{ 'products.facets.apply' | t }}</button>
          <button id="clear-sort" class="button button-filters-clearall">{{- 'products.facets.clear' | t -}}</button>
        </div>
      </div>
    </div>
  </div>
</div>  
<script>
// Sort Filter Start Work
document.addEventListener("DOMContentLoaded", function() { 
  const sortRadios = document.querySelectorAll('.filter-option');
  const applyButton = document.getElementById('apply-sort');
  const clearButton = document.getElementById('clear-sort');
  const productList = document.getElementById('product-list');
  let products = Array.from(document.querySelectorAll('.product')); // Capture the initial product list

  // Store the original product order
  const originalProducts = [...products];
  function sortProducts(sortValue) {
    let sortedProducts;
    switch (sortValue) {
      case 'az':
        sortedProducts = products.sort((a, b) => {
          const nameA = a.dataset.name || '';
          const nameB = b.dataset.name || '';
          return nameA.localeCompare(nameB);
        });
        break;
      case 'za':
        sortedProducts = products.sort((a, b) => {
          const nameA = a.dataset.name || '';
          const nameB = b.dataset.name || '';
          return nameB.localeCompare(nameA);
        });
        break;
      case 'lowprice':
        sortedProducts = products.sort((a, b) => {
          const priceA = parseFloat(a.dataset.price) || 0;
          const priceB = parseFloat(b.dataset.price) || 0;
          return priceA - priceB;
        });
        break;
      case 'highprice':
        sortedProducts = products.sort((a, b) => {
          const priceA = parseFloat(a.dataset.price) || 0;
          const priceB = parseFloat(b.dataset.price) || 0;
          return priceB - priceA;
        });
        break;
      case 'oldnew':
        sortedProducts = products.sort((a, b) => {
          const dateA = new Date(a.dataset.date) || new Date(0);
          const dateB = new Date(b.dataset.date) || new Date(0);
          return dateA - dateB;
        });
        break;
      case 'newold':
        sortedProducts = products.sort((a, b) => {
          const dateA = new Date(a.dataset.date) || new Date(0);
          const dateB = new Date(b.dataset.date) || new Date(0);
          return dateB - dateA;
        });
        break;
      case 'instock':
        sortedProducts = products.filter(product => {
          const quantity = parseInt(product.dataset.quantity) || 0;
          return quantity > 0;
        });
        break;
      default:
        sortedProducts = originalProducts; // Reset to original product order when 'default' is selected
        break;
    }

    // Clear and append sorted/filtered products
    productList.innerHTML = '';
    sortedProducts.forEach(product => productList.appendChild(product));
  }

  // Apply sort when Apply button is clicked
  applyButton.addEventListener('click', function() {
    const selectedSort = document.querySelector('input[name="sort"]:checked').value;
    sortProducts(selectedSort);
    const element = document.getElementById('sort_by_filter');
    element.style.display='none';
    jQuery('body').css('overflow-y', 'visible');
  });

  // Reset products to default state when Clear button is clicked
  clearButton.addEventListener('click', function() {
    document.querySelectorAll('input[name="sort"]').forEach(radio => radio.checked = false); // Uncheck all radio buttons
    products = [...originalProducts]; // Reset the product array to the original products
    sortProducts(); // Re-render the original product order
  });
});
$(document).on("click", function(e) {
  if ($(e.target).is(".ReactModal__Content, .plp-header-tools-filter-title ,.plp-header-secondary, .plp-header-tools-filter-sort, .filter-panel, .filter-option, .overlay-outer-title, .filter-selector, .sort_option, .sort_option_input, .filter-option-title") === false) {
    $("#sort_by_filter").hide();
    jQuery('body').css('overflow-y', 'visible');
  }
});
// Sort Filter End Work
</script>
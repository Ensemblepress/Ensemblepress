<style>
  @media (min-width: 835px) {
    .rte {
        margin: 0px 14rem;
    }
  }
  @media (max-width: calc(834px)) {
    .rte {
        margin: 0px 2rem;
    }
  }
  
</style>

{{ 'lr-widget-dts.css' | asset_url | stylesheet_tag }}
{{ 'lr-swiper-components.css' | asset_url | stylesheet_tag }}
<div class="plp-header">
  <div class="plp-header-primary">  
    <div class="widget-dts">
      <div class="widget-dts-text widget-dts-text-ghost">{{ page.title }}</div>  
      <!-- Foreground Text -->
      <div id="foreground" class="widget-dts-text">{{ page.title }}</div>  
      <!-- Middleground Text -->
      <div id="middleground" class="widget-dts-text">{{ page.title }}</div>
    </div>
  </div>
</div>

<div class="page-width page-width--narrow section-{{ section.id }}-padding">
  {% comment %}	
  <h1 class="main-page-title page-title h0{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}">
    {{ page.title | escape }}
  </h1>
  {% endcomment %}
  <div class="rte{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
    {{ page.content }}
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const typefaces = [0, 1, 2, 3, 4];
    let typefacesDynamic = [...typefaces];

    function randomNumberInRange(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // Select random typefaces and remove them from the array
    const typefaceForegroundIndex = randomNumberInRange(0, typefacesDynamic.length - 1);
    const typefaceNameForeground = typefacesDynamic.splice(typefaceForegroundIndex, 1)[0];

    const typefaceMiddlegroundIndex = randomNumberInRange(0, typefacesDynamic.length - 1);
    const typefaceNameMiddleground = typefacesDynamic.splice(typefaceMiddlegroundIndex, 1)[0];

    const typefaceBackgroundIndex = randomNumberInRange(0, typefacesDynamic.length - 1);
    const typefaceNameBackground = typefacesDynamic.splice(typefaceBackgroundIndex, 1)[0];

    // Randomly select colors
    const colorForeground = randomNumberInRange(0, 4);
    const colorMiddleground = randomNumberInRange(0, 4);
    const colorBackground = randomNumberInRange(0, 4);

    // Randomly decide the layers amount
    const layersAmount = randomNumberInRange(0, 2);

    // Get the elements
    const foregroundElement = document.getElementById('foreground');
    const middlegroundElement = document.getElementById('middleground');
    const backgroundElement = document.getElementById('background');

    // Apply classes to foreground element
    foregroundElement.classList.add(`widget-dts-typeface-${typefaceNameForeground}`);
    foregroundElement.classList.add(`widget-dts-color-foreground-${colorForeground}`);

    // Apply classes to middleground element
    middlegroundElement.classList.add(`widget-dts-typeface-${typefaceNameMiddleground}`);
    middlegroundElement.classList.add(`widget-dts-color-middleground-${colorMiddleground}`);

    // Apply classes to background element
    backgroundElement.classList.add(`widget-dts-typeface-${typefaceNameBackground}`);
    backgroundElement.classList.add(`widget-dts-color-background-${colorBackground}`);

    // Conditionally hide elements based on layersAmount
    if (layersAmount < 2) {
        middlegroundElement.classList.add('widget-dts-text-hidden');
    }
    if (layersAmount < 1) {
        backgroundElement.classList.add('widget-dts-text-hidden');
    }
});
</script>

{% schema %}
{
  "name": "t:sections.main-page.name",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}

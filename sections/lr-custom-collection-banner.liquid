{{ 'lr-widget-dts.css' | asset_url | stylesheet_tag }}
{{ 'lr-swiper-components.css' | asset_url | stylesheet_tag }}
<script src="{{ 'lr-sort-filter.js' | asset_url }}" defer="defer"></script>
<div class="plp-header">
    <div class="plp-header-primary">
      {% comment %}
      {% assign banner_mobile_image = collection.metafields.custom.banner_mobile_image %}
      {%- if section.settings.show_collection_image and collection.image -%}
        <picture>
          <source media="(min-width:835px)" srcset="{{ collection.image | img_url:"master" }}" alt="{{ collection.title }}">
          <img src="{{ banner_mobile_image | img_url :'master'}}" alt="{{ collection.title }}">
        </picture>
        {% else %}
        <picture>
          <source media="(min-width:835px)" srcset="https://cdn.shopify.com/s/files/1/0645/7563/5607/files/hd-paperbacks-2.svg?v=1722428149">
          <img src="https://cdn.shopify.com/s/files/1/0645/7563/5607/files/hd-paperbacks-2-m.svg?v=1722428149">
        </picture> 
      {%- endif -%}
      {% endcomment %}
      <div class="widget-dts">
          <div class="widget-dts-text widget-dts-text-ghost">
              {{ collection.title }}
          </div>
          <!-- Foreground Text -->
          <div id="foreground" class="widget-dts-text">
              {{ collection.title }}
          </div>      
          <!-- Middleground Text -->
          <div id="middleground" class="widget-dts-text">
              {{ collection.title }}
          </div>      
          <!-- Background Text -->
          <div id="background" class="widget-dts-text">
              {{ collection.title }}
          </div>
      </div>
    </div>
  {%- if section.settings.enable_sorting -%}
    <div class="plp-header-secondary">
        <ul class="plp-header-tools">
            <li class="plp-header-tools-filter plp-header-tools-filter-sort" id="sortButton">
              <span class="plp-header-tools-filter-title" tabindex="0" onkeydown="if(event.key === 'Enter' || event.key === ' ') this.click();">{{ 'products.facets.sort_by_label' | t }}</span>
              <span class="plp-header-tools-filter-icon plp-header-tools-filter-title" tabindex="0" onkeydown="if(event.key === 'Enter' || event.key === ' ') this.click();"></span>
            </li>
        </ul>
    </div>
  {%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%} 
    <div class="ReactModalPortal ReactModal__Body--open" id="sort_by_filter">
      {% render 'lr-sort-filter-drawer', 
         sort_by: sort_by, %}
    </div>
  {% endif %} 
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const typefaces = [0, 1, 2, 3, 4];
    let typefacesDynamic = [...typefaces];
    function randomNumberInRange(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
  
    // Select random typefaces and remove them from the array
    const typefaceForegroundIndex = randomNumberInRange(0, typefacesDynamic.length - 1);
    const typefaceNameForeground = typefacesDynamic.splice(typefaceForegroundIndex, 1)[0];
    const typefaceMiddlegroundIndex = randomNumberInRange(0, typefacesDynamic.length - 1);
    const typefaceNameMiddleground = typefacesDynamic.splice(typefaceMiddlegroundIndex, 1)[0];
    const typefaceBackgroundIndex = randomNumberInRange(0, typefacesDynamic.length - 1);
    const typefaceNameBackground = typefacesDynamic.splice(typefaceBackgroundIndex, 1)[0];

    // Randomly select colors
    const colorForeground = randomNumberInRange(0, 4);
    const colorMiddleground = randomNumberInRange(0, 4);
    const colorBackground = randomNumberInRange(0, 4);

    // Randomly decide the layers amount
    const layersAmount = randomNumberInRange(0, 2);

    // Get the elements
    const foregroundElement = document.getElementById('foreground');
    const middlegroundElement = document.getElementById('middleground');
    const backgroundElement = document.getElementById('background');

    // Apply classes to foreground element
    foregroundElement.classList.add(`widget-dts-typeface-${typefaceNameForeground}`);
    foregroundElement.classList.add(`widget-dts-color-foreground-${colorForeground}`);

    // Apply classes to middleground element
    middlegroundElement.classList.add(`widget-dts-typeface-${typefaceNameMiddleground}`);
    middlegroundElement.classList.add(`widget-dts-color-middleground-${colorMiddleground}`);

    // Apply classes to background element
    backgroundElement.classList.add(`widget-dts-typeface-${typefaceNameBackground}`);
    backgroundElement.classList.add(`widget-dts-color-background-${colorBackground}`);

    // Conditionally hide elements based on layersAmount
    if (layersAmount < 2) {
        middlegroundElement.classList.add('widget-dts-text-hidden');
    }
    if (layersAmount < 1) {
        backgroundElement.classList.add('widget-dts-text-hidden');
    }
});
</script>

{% schema %}
  {
    "name": "Custom Collection Banner",
    "settings": [
      {
        "type": "checkbox",
        "id": "show_collection_image",
        "default": false,
        "label": "t:sections.main-collection-banner.settings.show_collection_image.label",
        "info": "t:sections.main-collection-banner.settings.show_collection_image.info"
      },
      {
        "type": "checkbox",
        "id": "enable_sorting",
        "default": false,
        "label": "t:sections.main-collection-product-grid.settings.enable_sorting.label"
      }
    ]
  }
{% endschema %}